#include<iostream>
using namespace std;

char* GetNizKaraktera(const char* tekst) {
	if (tekst == nullptr)
		return nullptr;
	int vel = strlen(tekst) + 1;
	char* novi = new char[vel];
	strcpy_s(novi, vel, tekst);
	return novi;
}

class Artikal {
	char* _sifra; // SIF001
	char* _naziv; // Hljeb
	double _cijena; // 1.00
	int _kolicinaNaSkladistu; // 5
public:
	//potrebne konstruktor i destruktor funkcije (imati na umu i konstruktor kopije)

	Artikal(const char* sifra = "SIF000", const char* naziv = "---", double cijena = 0, int kolicina = 0) {
		_sifra = GetNizKaraktera(sifra);
		_naziv = GetNizKaraktera(naziv);
		_cijena = cijena;
		_kolicinaNaSkladistu = kolicina;
	}

	Artikal(const Artikal& obj) {
		_sifra = GetNizKaraktera(obj._sifra);
		_naziv = GetNizKaraktera(obj._naziv);
		_cijena = obj._cijena;
		_kolicinaNaSkladistu = obj._kolicinaNaSkladistu;
	}

	Artikal& operator = (const Artikal& obj) {
		if (this != &obj) {
			delete[]_sifra;
			delete[]_naziv;

			_sifra = GetNizKaraktera(obj._sifra);
			_naziv = GetNizKaraktera(obj._naziv);
			_cijena = obj._cijena;
			_kolicinaNaSkladistu = obj._kolicinaNaSkladistu;
		}
		return *this;
	}

	//Operator -= na način da se stanje na skladištu artikla promijeni za proslijeđenu vrijednost

	Artikal& operator -= (int kolicina) {
		if (kolicina > _kolicinaNaSkladistu) {
			return *this;
		}
		_kolicinaNaSkladistu -= kolicina;
		return *this;
	}



	//Operator += na način da se stanje na skladištu artikla promijeni za proslijeđenu vrijednost

	Artikal& operator += (int kolicina) {
		_kolicinaNaSkladistu += kolicina;
		return *this;
	}


	//Operator ++ na način da se cijena artikla uveća za 1

	Artikal& operator ++ () {
		_cijena++;
		return *this;
	}

	//Operator -- na način da se cijena artikla umanji za 1

	Artikal& operator -- () {
		if (_cijena < 1) {
			return *this;
		}
		_cijena--;
		return *this;
	}

	//Operator == koji poredi artikle na osnovu sifre

	// kada su u pitaju poredjena > < == >= <= 

	bool operator == (const Artikal& drugiArtikal) {
		return strcmp(drugiArtikal._sifra, _sifra) == 0;
	}


	//Preklopiti operatore za i ispis podataka o artiklu

	~Artikal() {
		delete[]_naziv;
		_naziv = nullptr;
		delete[]_sifra;
		_sifra = nullptr;
	}

	int GetKolicinaNaSkladistu() { return _kolicinaNaSkladistu; }
	double GetCijena() { return _cijena; }
	char* GetSifra() { return _sifra; }

	friend ostream& operator <<(ostream& COUT, const Artikal& obj) {
		COUT << "[" << obj._sifra << "] " << obj._naziv << " - " << obj._cijena << " KM" << endl;
		COUT << "Artikala na stanju : " << obj._kolicinaNaSkladistu << endl;
		return COUT;
	}
};

class StavkaRacuna {
	Artikal* _artikal;
	int* _kolicina;
public:
	//potrebne konstruktor i destruktor funkcije (imati na umu i konstruktor kopije)

	StavkaRacuna(Artikal artikal = Artikal(), int kolicina = 0) {
		_artikal = new Artikal(artikal);
		_kolicina = new int(kolicina);
	}

	StavkaRacuna(const StavkaRacuna& obj) {
		_artikal = new Artikal(*obj._artikal);
		_kolicina = new int(*obj._kolicina);
	}
	//operator dodjele =

	StavkaRacuna& operator = (const StavkaRacuna& obj) {
		if (this != &obj) {
			delete _artikal;
			delete _kolicina;

			_artikal = new Artikal(*obj._artikal);
			_kolicina = new int(*obj._kolicina);
		}
		return *this;
	}



	//operator += koji uvećava stanje na skladištu artikla

	StavkaRacuna& operator +=(int kolicina) {
		_artikal->operator+=(kolicina);
		return *this;
	}

	//operator -= koji umanjuje stanje na skladištu artikla

	StavkaRacuna& operator -= (int kolcina) {
		_artikal->operator-=(kolcina);
		return *this;
	}

	//Operator poređenja == koji poredi stavke po sifri artikla

	bool operator == (const StavkaRacuna& drugaStavka) {
		return strcmp(_artikal->GetSifra(), drugaStavka._artikal->GetSifra()) == 0;
	}

	//operator ++ koji uvećava količinu stavke racuna

	StavkaRacuna& operator ++ () {
		(*_kolicina)++;
		//_kolicina = new int(*_kolicina++);
		return *this;
	}

	//operatore za ispis podataka

	~StavkaRacuna() {
		delete _artikal;
		_artikal = nullptr;
		delete _kolicina;
		_kolicina = nullptr;
	}

	bool operator == (const char * sifra) {
		return strcmp(_artikal->GetSifra(),sifra) == 0;
	}

	friend ostream& operator <<(ostream& COUT, const StavkaRacuna& obj) {
		COUT << *obj._artikal;
		COUT << "Kupljeno : " << *obj._kolicina << " kom." << endl;
		return COUT;
	}


	double GetCijena() {//vraća cijenu stavke racuna (kolicina * cijena artikla) 
		return (*_kolicina * _artikal->GetCijena());
	}

	double GetKolicina() { //vraća količinu stavke računa }
		return *_kolicina;
	};

};
int pom = 1000;
class Racun {
	int _brojRacuna;
	//StavkaRacuna stavke[100]; // staticki niz 
	StavkaRacuna* _stavke;   // pokazivac na niz
	//StavkaRacuna* stavke[100]; // niz pokazivaca 
	int _brojStavki;
	int _maxBrojStavki;
	double _iznosBezPDV;
	double _iznosSaPDV;
	bool _naplaceno; // true ili false
public:
	//potrebne konstruktor i destruktor funkcije (imati na umu i konstruktor kopije)

	Racun(int max = 5) {
		_brojRacuna = pom + 1;
		_brojStavki = 0;
		_maxBrojStavki = max;
		_stavke = new StavkaRacuna[_maxBrojStavki];

		_iznosBezPDV = 0;
		_iznosSaPDV = 0;
		_naplaceno = false;
	}

	Racun(const Racun& obj) {
		_brojRacuna = obj._brojRacuna;
		_brojStavki = obj._brojStavki;
		_maxBrojStavki = obj._maxBrojStavki;
		_iznosBezPDV = obj._iznosBezPDV;
		_iznosSaPDV = obj._iznosSaPDV;
		_naplaceno = obj._naplaceno;
		_stavke = new StavkaRacuna[_maxBrojStavki];
		for (int i = 0; i < _brojStavki; i++)
		{
			_stavke[i] = obj._stavke[i];
		}
	}

	//operator dodjele =
	Racun& operator =(const Racun& obj) {
		if (this != &obj) {
			delete[]_stavke;

			_brojRacuna = obj._brojRacuna;
			_brojStavki = obj._brojStavki;
			_maxBrojStavki = obj._maxBrojStavki;
			_iznosBezPDV = obj._iznosBezPDV;
			_iznosSaPDV = obj._iznosSaPDV;
			_naplaceno = obj._naplaceno;
			_stavke = new StavkaRacuna[_maxBrojStavki];
			for (int i = 0; i < _brojStavki; i++)
			{
				_stavke[i] = obj._stavke[i];
			}

		}
		return *this;
	}

	~Racun() {
		delete[]_stavke;
		_stavke = nullptr;
	}


	//Operator() - dodaje nove artikle u stavke racuna (ulazni parametri su artikal i kolicina), kolicina nije obavezni parametar
	//Voditi računa o tome da li je račun već naplaćen
	//Ukoliko nema dovoljno artikala na stanju, ispisati odgovarajuću poruku
	//Prilikom svakog dodavanja artikla, azurirati vrijednosti iznosBezPDV i iznosSaPDV

	//                            10           15
	Racun& operator ()(Artikal artikal, int kolicina) {



		if (kolicina > artikal.GetKolicinaNaSkladistu()) {
			cout << "Nema artikla na stanju" << endl;
			return *this;
		}
		artikal.operator-=(kolicina);

		StavkaRacuna stavka(artikal, kolicina);

		_stavke[_brojStavki] = stavka;
		_brojStavki++;

		// 11 + 3.3  = 14.3
		_iznosBezPDV += stavka.GetCijena();
		_iznosSaPDV += stavka.GetCijena() + (stavka.GetCijena() * 0.14);
		return *this;
	}



	//Operator -= uklanja artikal iz stavki na osnovu njegove sifre
	//azurirati vrijednosti iznosBezPDV i iznosSaPDV

	Racun& operator -= (const char * sifra) {

		for (int i = 0; i < _brojStavki; i++)
		{
			if (_stavke[i] == sifra) {
				_iznosBezPDV -= _stavke[i].GetCijena();
				_iznosSaPDV -= (_stavke[i].GetCijena() + (_stavke[i].GetCijena() * 0.14));


				for (int j = i; j < _brojStavki-1; j++)
				{
					_stavke[j] = _stavke[j + 1];
				}

				_brojStavki--;
				return *this;
			}
		}
		cout << "Artikal nije nadjen" << endl;
		return *this;

	}


	void PrintRacun() {
		//Ispisuje sve stavke računa zajedno sa iznosom za plaćanje
		if (_naplaceno) {
			cout << "Racun je vec naplacen" << endl;
			return;
		}

		_naplaceno = true;

		cout << "===================== Br. racuna " << _brojRacuna << " =================================" << endl;
		for (int i = 0; i < _brojStavki; i++)
		{
			cout << _stavke[i] << endl;
		}

		cout << "Cijena bez PDV : " << _iznosBezPDV<<"KM" << endl;
		cout << "Cijena sa PDV : " << _iznosSaPDV <<"KM" << endl;



	}
};


void main() {
	//main je moguće mijenjati i prilagođavati
	//ali je ovo napisano sasvim dovoljno za testiranje funkcionalnosti zadatka
	//Racun racun;

	Artikal artikal1("SIF001", "Hljeb", 1.10, 50);
	Artikal artikal2("SIF002", "Drina", 5.50, 5);
	Artikal artikal3("SIF003", "Mlijeko", 2.25, 20);


	// aritkal -= int kolicina
	artikal1 -= (5); // operator -=
	artikal1 += (20);

	++artikal1; // prefiksni operator 
	--artikal1;

	//cout << arikal1;

	//if (artikal2 == arikal1) {
	//	cout << "Artikli su isti";
	//}
	//else
	//{
	//	cout << "Artikli nisu isti";
	//}

	//StavkaRacuna stavka1(artikal1, 5);
	//StavkaRacuna stavka2(artikal2, 2);

	//stavka1 += (10);
	//stavka1 -= (10);
	//++stavka1;
	//cout << "Ukupno ispada " << stavka1.GetCijena();

	//cout << stavka1;
	//if (stavka1 == stavka2) {
	//	cout << "Stavke su isti";
	//}
	//else
	//{
	//	cout << "Stavke nisu iste";
	//}

	Racun racun;
	//racun(artikal1, 5);
	racun(artikal2, 2);
	racun(artikal3, 3);

	racun -= ("SIF001");

	racun.PrintRacun();






	system("pause>0");
}

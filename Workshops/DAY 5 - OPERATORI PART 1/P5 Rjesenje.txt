#include<iostream>
using namespace std;

char* GetNizKaraktera(const char* tekst) {
	if (tekst == nullptr)
		return nullptr;
	int vel = strlen(tekst) + 1;
	char* novi = new char[vel];
	strcpy_s(novi, vel, tekst);
	return novi;
}

class Artikal {
	char* _sifra;
	char* _naziv;
	double _cijena;
	int _kolicinaNaSkladistu;
public:
	//potrebne konstruktor i destruktor funkcije (imati na umu i konstruktor kopije)

	Artikal(const char* sifra = "SIF000", const char* naziv = "---",double cijena = 0, int kolicina = 0) {

		_sifra = GetNizKaraktera(sifra);
		_naziv = GetNizKaraktera(naziv);
		_cijena = cijena;
		_kolicinaNaSkladistu = kolicina;

	}

	~Artikal() {

		delete[] _sifra;
		_sifra = nullptr;
		delete[] _naziv;
		_naziv = nullptr;
	}

	Artikal(const Artikal& obj) {

		_sifra = GetNizKaraktera(obj._sifra);
		_naziv = GetNizKaraktera(obj._naziv);
		_cijena = obj._cijena;
		_kolicinaNaSkladistu = obj._kolicinaNaSkladistu;

	}

	Artikal& operator = (const Artikal& obj) {

		if (this != &obj) {
			delete[] _sifra;
			delete[] _naziv;

			_sifra = GetNizKaraktera(obj._sifra);
			_naziv = GetNizKaraktera(obj._naziv);
			_cijena = obj._cijena;
			_kolicinaNaSkladistu = obj._kolicinaNaSkladistu;
		}
		return *this;

	}


	// Hljeb [SIF0001] - 1.20 KM 
	// Kolicina na skladistu - 30 kom

	friend ostream& operator << (ostream& COUT, const Artikal& obj) {
		COUT << obj._naziv<<" ["<<obj._sifra<<"] - "<<obj._cijena<<" KM" << endl;
		COUT << "Kolicina na skladistu : " << obj._kolicinaNaSkladistu << " kom" << endl;
		return COUT;
	}


	//Operator -= na način da se stanje na skladištu artikla promijeni za proslijeđenu vrijednost

	// artikal1 -= (5);


	Artikal& operator -= (int kolicina) {

		if (kolicina > _kolicinaNaSkladistu) {
			return *this;
		}


		_kolicinaNaSkladistu -= kolicina;
		return *this;

	}


	//Operator += na način da se stanje na skladištu artikla promijeni za proslijeđenu vrijednost

	// artikal1 += (15);

	Artikal& operator += (int kolicina) {

		_kolicinaNaSkladistu += kolicina;
		return *this;

	}


	//Operator ++ na način da se cijena artikla uveća za 1

	// artikal1++;

	Artikal& operator ++ () {

		_cijena++;
		return *this;

	}



	//Operator -- na način da se cijena artikla umanji za 1

	Artikal& operator -- () {

		if (_cijena < 1) {
			return *this;
		}

		_cijena--;
		return *this;


	}


	//Operator == koji poredi artikle na osnovu sifre

	// artikal1 == artikal2

	// operatori poredjenja  == != > >= < <= 

	bool operator == (const Artikal& obj) {

		if (strcmp(_sifra, obj._sifra) == 0) {
			return true;
		}
		else {
			return false;
		}

		// return strcmp(_sifra, obj._sifra) == 0;

	}


	int GetKolicinaNaSkladistu() { return _kolicinaNaSkladistu; }
	double GetCijena() { return _cijena; }
	char* GetSifra() { return _sifra; }
	char* GetNaziv() { return _naziv; }
};

class StavkaRacuna {
	Artikal* _artikal;
	int* _kolicina;
public:
	//potrebne konstruktor i destruktor funkcije (imati na umu i konstruktor kopije)

	StavkaRacuna(Artikal artikal = Artikal(), int kolicina = 0) {

		_artikal = new Artikal(artikal);
		_kolicina = new int(kolicina);


	}

	StavkaRacuna(const StavkaRacuna& obj) {

		_artikal = new Artikal(*obj._artikal);
		_kolicina = new int(*obj._kolicina);

	}

	StavkaRacuna& operator = (const StavkaRacuna& obj) {

		if (this != &obj) {
			delete _artikal;
			delete _kolicina;


			_artikal = new Artikal(*obj._artikal);
			_kolicina = new int(*obj._kolicina);
		}
		return *this;

	}

	~StavkaRacuna() {
		delete _artikal;
		_artikal = nullptr;
		delete _kolicina;
		_kolicina = nullptr;
	}

	friend ostream& operator << (ostream& COUT, const StavkaRacuna& obj) {
	
		COUT << *obj._artikal;
		COUT << "Kupljena kolicina : " << *obj._kolicina << endl;

		return COUT;
	}



	//operator += koji uvećava stanje na skladištu artikla

	// stavka1 += (5);

	StavkaRacuna& operator += (int kolicina) {

		_artikal->operator+=(kolicina);

		// _artikal += (kolicina);

		return *this;

	}

	//operator -= koji umanjuje stanje na skladištu artikla (jeste da u artiklu imamo ovo već preklopljeno, ali artikal je 
	//private atribut klase, ne možemo mu tek tako pristupati iz računa
	// stavka1 -= (5);

	StavkaRacuna& operator -= (int kolicina) {

		_artikal->operator-=(kolicina);


		return *this;

	}






	//Operator poređenja == koji poredi stavke po sifri artikla

	// stavka1 == stavka1

	bool operator == (const StavkaRacuna& obj) {

		if (strcmp(_artikal->GetSifra(), obj._artikal->GetSifra()  ) == 0) {
			return true;
		}
		else {
			return false;
		}

	}




	//operator ++ koji uvećava količinu stavke racuna

	StavkaRacuna& operator ++ () {

		_kolicina = new int(*_kolicina + 1);

		// *_kolicina += 1;


		return *this;
	}



	double GetCijena() {//vraća cijenu stavke racuna (kolicina * cijena artikla) 
		return *_kolicina * _artikal->GetCijena();
	}

	double GetKolicina() { //vraća količinu stavke računa }
		return *_kolicina;
	}

};
int pom = 1000; // koristi se za broj racuna samo ga povecas ++ 

class Racun {
	int _brojRacuna;
	StavkaRacuna* _stavke; // ---> ( ) [ ]
	int _trenutno;
	int _max;
	double _iznosBezPDV; // 3.60
	double _iznosSaPDV;  // 4.0 
	bool _naplaceno;     // ako je racun isprintan onda je ovo true, ako nije isprintan onda je false
public:
	//potrebne konstruktor i destruktor funkcije (imati na umu i konstruktor kopije)

	Racun(int max = 3) {

		_brojRacuna = pom + 1;
		_iznosBezPDV = 0;
		_iznosSaPDV = 0;
		_naplaceno = false;

		_trenutno = 0;
		_max = max;

		_stavke = new StavkaRacuna[_max];


	}


	Racun(const Racun& obj) {

		_brojRacuna = obj._brojRacuna;
		_iznosBezPDV = obj._iznosBezPDV;
		_iznosSaPDV = obj._iznosSaPDV;
		_naplaceno = obj._brojRacuna;

		_trenutno = obj._trenutno;
		_max = obj._max;

		_stavke = new StavkaRacuna[_max];

		for (int i = 0; i < _trenutno; i++)
		{
			_stavke[i] = obj._stavke[i];
		}



	}
	//operator dodjele =

	Racun& operator = (const Racun& obj) {
		if (this != &obj) {
			
			delete[] _stavke;

			_brojRacuna = obj._brojRacuna;
			_iznosBezPDV = obj._iznosBezPDV;
			_iznosSaPDV = obj._iznosSaPDV;
			_naplaceno = obj._brojRacuna;

			_trenutno = obj._trenutno;
			_max = obj._max;

			_stavke = new StavkaRacuna[_max];

			for (int i = 0; i < _trenutno; i++)
			{
				_stavke[i] = obj._stavke[i];
			}
		}
		return *this;
	}

	~Racun() {
		delete[] _stavke;
		_stavke = nullptr;
	}



	//Operator() - dodaje nove artikle u stavke racuna (ulazni parametri su artikal i kolicina), kolicina nije obavezni parametar
	//Voditi računa o tome da li je račun već naplaćen
	//Prilikom svakog dodavanja artikla, azurirati vrijednosti iznosBezPDV i iznosSaPDV

	// racun(artikal1, 5);


	Racun& operator () (Artikal artikal, int kolicina) {

		StavkaRacuna stavka(artikal, kolicina);

		stavka.operator-=(kolicina);




		if (_max == _trenutno) {
			cout << "Racun je popunjen" << endl;
			return *this;
		}

		for (int i = 0; i < _trenutno; i++)
		{
			// StavkaRacuna == StavkaRacuan
			if (_stavke[i] == stavka) {
				cout << "Stavka vec postoji" << endl;
				return *this;
			}
		}




		_iznosBezPDV += stavka.GetCijena(); // 1.20 * 5 == 6

		_iznosSaPDV += stavka.GetCijena() + (stavka.GetCijena() * 0.17);


		_stavke[_trenutno] = stavka;
		_trenutno++;


		return *this;

	}






	void PrintRacun() {
		//Ispisuje sve stavke računa zajedno sa iznosom za plaćanje

		if (_naplaceno == true) {
			cout << "Racun je vec naplacen" << endl;
			return;
		}

		_naplaceno = true;

		cout << "=============== Br.Racuna " << _brojRacuna << " ===============" << endl;

		for (int i = 0; i < _trenutno; i++)
		{
			cout << _stavke[i] << endl;
		}

		cout << "Iznos bez PDV: " << _iznosBezPDV << "KM" << endl;
		cout << "Iznos sa PDV: " << _iznosSaPDV << "KM" << endl;



	}
};


void main() {



	//artikal1 -= (5);
	//artikal1 += (15);


    //++artikal1;
    //--artikal1;


	//cout << artikal1;

	//if (artikal1 == artikal1) {
	//	cout << "Isti su" << endl;
	//}
	//else {
	//	cout << "Nisu isti" << endl;

	//}

	//cout << "Naziv ovog artikla je " << artikal1.GetNaziv() << endl;

	// StavkaRacuna stavka1(artikal1, 5);

	//stavka1 += (5);

	//stavka1 -= (5);


	//if (stavka1 == stavka1) {
	//	cout << "Isti su" << endl;
	//}
	//else {
	//	cout << "Nisu isti" << endl;

	//}

	//++stavka1;

	//cout << stavka1;

	Artikal artikal1("SIF001", "Hljeb", 1.20, 30);
	Artikal artikal2("SIF002", "Sok", 2.30, 20);
	Artikal artikal3("SIF003", "Cokolada", 3.0, 10);

	Racun racun;

	racun(artikal1, 5);
	racun(artikal1, 2);
	racun(artikal3, 1);
	racun(artikal3, 1);

	racun.PrintRacun();
	racun.PrintRacun();


	system("pause>0");
}

#include<iostream>
using namespace std;

char* GetNizKaraktera(const char* tekst) {
	if (tekst == nullptr)
		return nullptr;
	int vel = strlen(tekst) + 1;
	char* novi = new char[vel];
	strcpy_s(novi, vel, tekst);
	return novi;
}


class Artikal {
	char* _sifra;  	 // pok [ ] char
	char* _naziv;	 // pok [ ] char
	double _cijena;
	int _kolicinaNaSkladistu;
public:


	Artikal(const char* sifra = "SIF000",const char* naziv = "---", double cijena = 0, int kolicina = 0) {

		_sifra = GetNizKaraktera(sifra);
		_naziv = GetNizKaraktera(naziv);
		_cijena = cijena;
		_kolicinaNaSkladistu = kolicina;

	}

	Artikal(const Artikal& obj) {

		_sifra = GetNizKaraktera(obj._sifra);
		_naziv = GetNizKaraktera(obj._naziv);
		_cijena = obj._cijena;
		_kolicinaNaSkladistu = obj._kolicinaNaSkladistu;

	}

	Artikal& operator = (const Artikal& obj) {
		if (this != &obj) {

			delete[] _sifra;
			delete[] _naziv;


			_sifra = GetNizKaraktera(obj._sifra);
			_naziv = GetNizKaraktera(obj._naziv);
			_cijena = obj._cijena;
			_kolicinaNaSkladistu = obj._kolicinaNaSkladistu;

		}
		return *this;
	}

	~Artikal() {
		delete[] _sifra;
		_sifra = nullptr;
		delete[] _naziv;
		_naziv = nullptr;
	}

	friend ostream& operator << (ostream& COUT, const Artikal& obj) {

		COUT << "["<<obj._sifra<<"] - "<<obj._naziv<<", cijene "<<obj._cijena<<" KM" << endl;
		COUT << "Kolicina na skladistu : " << obj._kolicinaNaSkladistu << " kom" << endl;

		return COUT;
	}




	//Operator -= na način da se stanje na skladištu artikla promijeni za proslijeđenu vrijednost


	// artikal1 -= (5);

	Artikal& operator -= (int kolicina) {

		if (_kolicinaNaSkladistu < kolicina) {
			return *this;
		}

		_kolicinaNaSkladistu -= kolicina;

		// _kolicinaNaSkladistu = _kolicinaNaSkladistu - kolicina;


		return *this;
	}




	//Operator += na način da se stanje na skladištu artikla promijeni za proslijeđenu vrijednost

	// artikal1 += 15;

	Artikal& operator += (int kolicina) {

		_kolicinaNaSkladistu += kolicina;

		return *this;

	}




	//Operator ++ na način da se cijena artikla uveća za 1

	// artikal1++;

	// ++ i -- operatori su prefiksni operatori 


	Artikal& operator ++ () {

		_cijena += 1;

		return *this;

	}




	//Operator -- na način da se cijena artikla umanji za 1

	// --artikal1;

	Artikal& operator -- () {

		if (_cijena < 1) {
			return *this;
		}

		_cijena -= 1;

		return *this;

	}




	//Operator == koji poredi artikle na osnovu sifre

	// artikal1 == artikal2

	// operatori poredjenja == != < > <= >= 

	bool operator == (const Artikal& obj) {

		if (strcmp(_sifra, obj._sifra) == 0) {
			return true;
		}
		else {
			return false;
		}

		// return strcmp(_sifra, obj._sifra) == 0;

	}



	int GetKolicinaNaSkladistu()const { return _kolicinaNaSkladistu; }
	double GetCijena()const { return _cijena; }
	char* GetSifra()const { return _sifra; }



};

class StavkaRacuna {
	Artikal* _artikal;    // pok ( )  <--- jedna vrijednost
	int* _kolicina;		  // pok ( )  <--- jedna vrijednost
public:

	StavkaRacuna(Artikal artikal = Artikal() , int kolicina = 0 ) {

		_artikal = new Artikal(artikal);
		_kolicina = new int(kolicina);

	}

	StavkaRacuna(const StavkaRacuna& obj) {

		_artikal = new Artikal(*obj._artikal);
		_kolicina = new int(*obj._kolicina);

	}

	StavkaRacuna& operator = (const StavkaRacuna& obj) {
		if (this != &obj) {

			delete _artikal;
			delete _kolicina;


			_artikal = new Artikal(*obj._artikal);
			_kolicina = new int(*obj._kolicina);
		}
		return *this;
	}

	~StavkaRacuna() {
		delete _artikal;
		_artikal = nullptr;
		delete _kolicina;
		_kolicina = nullptr;
	}


	friend ostream& operator << (ostream& COUT, const StavkaRacuna& obj) {


		COUT << *obj._artikal;
		COUT << "Kupljena kolicina : " << *obj._kolicina<<" kom" << endl;

		return COUT;
	}



	//Operator += koji uvećava stanje na skladištu artikla


	//stavka1 += (10);

	StavkaRacuna& operator += (int kolicina) {

		_artikal->operator+=(kolicina);


		return *this;

	}



	//Operator -= koji umanjuje stanje na skladištu artikla


	// stavka1 -= 10;

	StavkaRacuna& operator -= (int kolicina) {



		_artikal->operator-=(kolicina);

		return *this;

	}


	//Operator == koji poredi stavke na osnovu sifre

	// stavka1 == stavka1

	bool operator == (const StavkaRacuna& obj) {

		if (strcmp(_artikal->GetSifra(), obj._artikal->GetSifra()) == 0) {
			return true;
		}
		else {
			return false;
		}


		//if (_artikal == obj._artikal) {
		//	return true;
		//}
		//else {
		//	return false;
		//}



	}







	//Operator ++ koji uvećava količinu stavke racuna

	// ++stavka1;

	StavkaRacuna& operator ++ () {


		//*_kolicina += 1;

		_kolicina = new int(*_kolicina + 1);



		return *this;

	}


	// 3 * 1.20 = 3.60 
	double GetCijena() { //vraća cijenu stavke racuna (kolicina * cijena artikla) 

		return *_kolicina * _artikal->GetCijena();

	}

	double GetKolicina() { //vraća količinu stavke računa 
		return *_kolicina;
	}


};

int pom = 1000; // koristi se za broj racuna samo ga povecas ++ 

class Racun {
	int _brojRacuna;

	StavkaRacuna* _stavke;  // pok [ ] Stavke
	int _trenutno;
	int _max;

	double _iznosBezPDV;
	double _iznosSaPDV; // 17% 

	bool _naplaceno; // true ili false
public:


	Racun(int max = 3) {

		_brojRacuna = pom + 1;

		_trenutno = 0;
		_max = max;
		_stavke = new StavkaRacuna[_max];

		_iznosBezPDV = 0;
		_iznosSaPDV = 0;

		_naplaceno = false;

	}

	Racun(const Racun& obj) {

		_brojRacuna = obj._brojRacuna;

		_iznosBezPDV = obj._iznosBezPDV;
		_iznosSaPDV = obj._iznosSaPDV;

		_naplaceno = obj._naplaceno;

		_trenutno = obj._trenutno;
		_max = obj._max;

		_stavke = new StavkaRacuna[_max];


		for (int i = 0; i < _trenutno; i++)
		{
			_stavke[i] = obj._stavke[i];
		}


	}

	Racun& operator = (const Racun& obj) {
		if (this != &obj) {

			delete[] _stavke;



			_brojRacuna = obj._brojRacuna;

			_iznosBezPDV = obj._iznosBezPDV;
			_iznosSaPDV = obj._iznosSaPDV;

			_naplaceno = obj._naplaceno;

			_trenutno = obj._trenutno;
			_max = obj._max;

			_stavke = new StavkaRacuna[_max];


			for (int i = 0; i < _trenutno; i++)
			{
				_stavke[i] = obj._stavke[i];
			}
		}
		return *this;
	}

	~Racun() {

		delete[] _stavke;
		_stavke = nullptr;

	}

	void PrintRacun() {
		//Ispisuje sve stavke računa zajedno sa iznosom za plaćanje

		if (_naplaceno == true) {
			cout << "Racun je vec isprintan" << endl;
			return;
		}


		cout << "========== Br. Racuna " << _brojRacuna << " ==========" << endl << endl;
		
		for (int i = 0; i < _trenutno; i++)
		{
			cout << _stavke[i] << endl;
			cout << "================" << endl<<endl;
		}

		cout << "Iznos BEZ PDV : " << _iznosBezPDV << " KM" << endl;
		cout << "Iznos SA PDV : " << _iznosSaPDV << " KM" << endl;

		_naplaceno = true;

	}




	//Operator () - dodaje nove artikle u stavke racuna (ulazni parametri su artikal i kolicina)
	//Voditi računa o tome da li je račun već naplaćen
	//Prilikom svakog dodavanja artikla, azurirati vrijednosti iznosBezPDV i iznosSaPDV

	// racun(artikal1, 3);


	Racun& operator () (Artikal artikal, int kolicina) {

		if (_max == _trenutno) {
			cout << "Racun je pun" << endl;
			return *this;

		}


		StavkaRacuna stavka(artikal, kolicina); // Hljeb - 3


		for (int i = 0; i < _trenutno; i++)
		{
			if (stavka == _stavke[i]) {
				cout << "Ta stavka je vec dodana" << endl;
				return *this;
			}
		}


		stavka.operator-=(kolicina);


		_iznosBezPDV += stavka.GetCijena(); // + 12.15 +  1/2

		_iznosSaPDV += stavka.GetCijena() + (stavka.GetCijena() * 0.17)  ;   // + 12.15 + 



		_stavke[_trenutno] = stavka;

		_trenutno++;



		return *this;
	}




};


void main() {




	//artikal1 -= (5); // operator -= 
	//artikal1 += 15;  // operator += 

	//++artikal1;      // operator ++
	//--artikal1;      // operator -- 


	//if (artikal1 == artikal1) {
	//	cout << "Artikli su isti" << endl;
	//}
	//else {
	//	cout << "Artikli nisu isti" << endl;
	//}

	//artikal1.GetCijena() = 0.50;

	//cout << "Sifra prozvoda je " << artikal1.GetSifra() << endl;

	Artikal artikal1("SIF001", "Hljeb", 1.20, 30);
	Artikal artikal2("SIF002", "Ulje", 1.95, 20);
	Artikal artikal3("SIF003", "Mlijeko", 2.20, 10);

	StavkaRacuna stavka1(artikal1, 3); // Hljeb - 4
	StavkaRacuna stavka2(artikal2, 2);


	Racun racun(3);

	racun(artikal1,3);
	racun(artikal2,1);
	racun(artikal2,1);
	racun(artikal3,3);





	racun.PrintRacun();
	racun.PrintRacun();





	//stavka1 += (10);
	//stavka1 -= 10;




	//++stavka1;


	//cout << stavka1;

	//if (stavka1 == stavka1) {
	//	cout << "Stavke su iste" << endl;
	//}
	//else {
	//	cout << "Stavke nisu iste" << endl;
	//}


	system("pause>0");
}

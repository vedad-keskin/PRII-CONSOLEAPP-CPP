#include <iostream>
using namespace std;

char* GetNizKaraktera(const char* tekst) {
	if (tekst == nullptr)
		return nullptr;
	int vel = strlen(tekst) + 1;
	char* novi = new char[vel];
	strcpy_s(novi, vel, tekst);
	return novi;
}

class Datum {
public:
	int* _dan, * _mjesec, * _godina;
public:


	Datum(int dan=1, int mjesec=1, int godina=2000) {
		_dan = new int(dan);
		_mjesec = new int(mjesec);
		_godina = new int(godina);
	}

	Datum(const Datum& obj) {
		_dan = new int(*obj._dan);
		_mjesec = new int(*obj._mjesec);
		_godina = new int(*obj._godina);
	}

	Datum& operator = (const Datum& obj) {
		if (this != &obj) {
			delete _dan;
			delete _mjesec;
			delete _godina;

			_dan = new int(*obj._dan);
			_mjesec = new int(*obj._mjesec);
			_godina = new int(*obj._godina);

		}
		return *this;

	}

	friend ostream& operator <<(ostream& COUT, const Datum& obj) {
		cout << *obj._dan << "." << *obj._mjesec << "." << *obj._godina;
		return COUT;
	}

	~Datum() {
		delete _dan;
		_dan = nullptr;
		delete _mjesec;
		_mjesec = nullptr;
		delete _godina;
		_godina = nullptr;
	}

	// Kreirati i implementirati
	// Konstruktor
	// Konstruktor kopije
	// Destruktor
};

class Kandidat {
public:
	char* _imePrezime;
	char* _JMBG;
public:


	Kandidat(const char* ime="Nema imena", const char* jmbg="Nema jmbg") {
		_imePrezime = GetNizKaraktera(ime);
		_JMBG = GetNizKaraktera(jmbg);
	}

	Kandidat(const Kandidat& obj) {
		_imePrezime = GetNizKaraktera(obj._imePrezime);
		_JMBG = GetNizKaraktera(obj._JMBG);
	}

	Kandidat& operator = (const Kandidat& obj) {
		if (this != &obj) {
			delete[]_imePrezime;
			delete[]_JMBG;

			_imePrezime = GetNizKaraktera(obj._imePrezime);
			_JMBG = GetNizKaraktera(obj._JMBG);

		}
		return *this;

	}

	friend ostream& operator <<(ostream& COUT, const Kandidat& obj) {
		COUT << obj._imePrezime << " - " << obj._JMBG;
		return COUT;
	}

	~Kandidat() {
		delete[]_imePrezime;
		_imePrezime = nullptr;
		delete[] _JMBG;
		_JMBG = nullptr;
	}



	// Kreirati i implementirati
// Konstruktor
// Konstruktor kopije
// Destruktor

};

class Osoba {
public:
	Datum _datumRodjenja;
	char* _imePrezime;
	char* _JMBG;
	char* _Prebivaliste;
public:


	Osoba(const char* ime="---", const char* jmbg="---", const char* prebivaliste="---", Datum datum = Datum()) {
		_imePrezime = GetNizKaraktera(ime);
		_JMBG = GetNizKaraktera(jmbg);
		_Prebivaliste = GetNizKaraktera(prebivaliste);

		_datumRodjenja = datum;
	}

	Osoba(const Osoba& obj) {
		_imePrezime = GetNizKaraktera(obj._imePrezime);
		_JMBG = GetNizKaraktera(obj._JMBG);
		_Prebivaliste = GetNizKaraktera(obj._Prebivaliste);

		_datumRodjenja = obj._datumRodjenja;
	}

	Osoba& operator = (const Osoba& obj) {
		if (this != &obj) {
			delete[]_JMBG;
			delete[]_Prebivaliste;
			delete[] _imePrezime;
			

			_imePrezime = GetNizKaraktera(obj._imePrezime);
			_JMBG = GetNizKaraktera(obj._JMBG);
			_Prebivaliste = GetNizKaraktera(obj._Prebivaliste);

			_datumRodjenja = obj._datumRodjenja;
		}
		return *this;

	}

	friend ostream& operator <<(ostream& COUT, const Osoba& obj) {
		COUT << obj._imePrezime << " [" << obj._JMBG << "] " << " rodjen/a " << obj._datumRodjenja << " iz " << obj._Prebivaliste << endl;
		return COUT;
	}

	~Osoba() {
		delete[]_imePrezime;
		_imePrezime = nullptr;
		delete[] _JMBG;
		_JMBG = nullptr;
		delete[] _Prebivaliste;
		_Prebivaliste = nullptr;
	}

	// Kreirati i implementirati
// Konstruktor
// Konstruktor kopije
// Destruktor

};

class GlasackiListic {
public:
	Osoba* _glasac;
	Kandidat* _glasZa;
public:


	GlasackiListic(Osoba osoba=Osoba(), Kandidat kandidat=Kandidat()) {
		_glasac = new Osoba(osoba);
		_glasZa = new Kandidat(kandidat);

	}

	GlasackiListic(const GlasackiListic& obj) {
		_glasac = new Osoba(*obj._glasac);
		_glasZa = new Kandidat(*obj._glasZa);

	}

	GlasackiListic& operator = (const GlasackiListic& obj) {
		if (this != &obj) {
			delete _glasac;
			delete _glasZa;
		

			_glasac = new Osoba(*obj._glasac);
			_glasZa = new Kandidat(*obj._glasZa);
		}
		return *this;

	}

	friend ostream& operator <<(ostream& COUT, const GlasackiListic& obj) {

		COUT << *obj._glasac;
        COUT << "GLASA ZA : " << endl;
		COUT << *obj._glasZa<<endl<<endl;
		COUT << "========================" << endl<<endl;

		return COUT;
	}

	~GlasackiListic() {
		delete _glasac;
		_glasac = nullptr;
		delete _glasZa;
		_glasZa = nullptr;
	}


	// Kreirati i implementirati
// Konstruktor
// Konstruktor kopije
// Destruktor

};

class Izbori {
public:
	char* _glasackoMjesto;
	GlasackiListic* _glasovi;
	int _trenutnoGlasova;
	int _maxBrojGlasova;
public:

	// Kreirati i implementirati
	// Konstruktor
	// Konstruktor kopije
	// Destruktor



	Izbori(const char* glasackomjesto="Sarajevo", int max=3) {
		_glasackoMjesto = GetNizKaraktera(glasackomjesto);

		_maxBrojGlasova = max;
		_trenutnoGlasova = 0;
		_glasovi = new GlasackiListic[_maxBrojGlasova];

	}

	Izbori(const Izbori& obj) {

		_glasackoMjesto = GetNizKaraktera(obj._glasackoMjesto);

		_maxBrojGlasova = obj._maxBrojGlasova;
		_trenutnoGlasova = obj._trenutnoGlasova;
		_glasovi = new GlasackiListic[_maxBrojGlasova];

		for (int i = 0; i < obj._trenutnoGlasova; i++)
		{
			_glasovi[i] = obj._glasovi[i];
		}
	}

	Izbori& operator = (const Izbori& obj) {
		if (this != &obj) {
			delete[] _glasackoMjesto;
			delete[] _glasovi;
			_glasackoMjesto = GetNizKaraktera(obj._glasackoMjesto);

			_maxBrojGlasova = obj._maxBrojGlasova;
			_trenutnoGlasova = obj._trenutnoGlasova;
			_glasovi = new GlasackiListic[_maxBrojGlasova];
			for (int i = 0; i < obj._trenutnoGlasova; i++)
			{
				_glasovi[i] = obj._glasovi[i];
			}
		}
		return *this;

	}

	friend ostream& operator <<(ostream& COUT, const Izbori& obj) {
		COUT << "Glasacko mjesto : " << obj._glasackoMjesto << endl;
		COUT << "=======GLASOVI=========" << endl<<endl;
		for (int i = 0; i < obj._trenutnoGlasova; i++)
		{
			COUT << obj._glasovi[i];
		}


		return COUT;
	}

	~Izbori() {
		delete[] _glasackoMjesto;
		_glasackoMjesto = nullptr;
		delete[]_glasovi;
		_glasovi = nullptr;
	}

	bool AddGlas(GlasackiListic glas)
	{
		/*funkcija treba da omoguci dodavanje informacija o novom glasu i tom pril-ikom:
		-     onemoguciti da ista osoba glasa vise puta
		-     onemoguciti glasanje osobama mladjim od 18 godina (uzeti u obzir godinu rodjenja)
		-     onemoguciti glasanje osobama iz drugih opstina
		-     u zavisnosti od uspjesnosti operacije funkcija vraca true ili false
		*/
		if (_maxBrojGlasova == _trenutnoGlasova) {
			cout << "Nije moguce dodati jos glasova" << endl;
			return false;
		}
		if (strcmp(_glasackoMjesto, glas._glasac->_Prebivaliste) != 0) {
			cout << "Kandidat ne pripada tom prebivalistu" << endl;
			return false;
		}
		for (int i = 0; i < _trenutnoGlasova; i++)
		{
			if (strcmp(_glasovi[i]._glasac->_imePrezime, glas._glasac->_imePrezime) == 0) {
				cout << "Glasac ne moze glasati vise puta" << endl;
				return false;
			}

		}
		if (*glas._glasac->_datumRodjenja._godina > 2005) {
			cout << "Glasac nema 18 godina" << endl;
			return false;
		}


		_glasovi[_trenutnoGlasova] = glas;
		_trenutnoGlasova++;
		return true;
	}




};


void ProglasiPobjednika(Izbori izbor) {
	// funkcija treba ispisati listu kandidata, a uz svakog kandidata je potrebno ispisati i osvojeni procenat glasova

	for (int i = 0; i < izbor._trenutnoGlasova; i++) 
	{
		int brojGlasova = 0;
		bool postojiKandidat = false;

		for (int k = 0; k < i; k++)
		{
			if (strcmp(izbor._glasovi[i]._glasZa->_imePrezime, izbor._glasovi[k]._glasZa->_imePrezime) == 0)
			{
				postojiKandidat = true;
			}
		}

		if (!postojiKandidat) { 
			for (int j = 0; j < izbor._trenutnoGlasova; j++)
			{
				if (strcmp(izbor._glasovi[i]._glasZa->_imePrezime, izbor._glasovi[j]._glasZa->_imePrezime) == 0) {
					brojGlasova++;
				}
			}

			cout << "Kandidat : ";
			cout << izbor._glasovi[i]._glasZa->_imePrezime;
			cout << " " << (brojGlasova / float(izbor._trenutnoGlasova)) * 100 <<"%"<< endl;
		}


	}
}
void main() {
	Datum punoljetni(12, 12, 1998);
	Datum maloljetni(12, 12, 2012);



	Osoba osoba1("Veda", "IB180079", "Mostar", punoljetni);
	Osoba osoba2("Emina", "IB11280079", "Mostar", maloljetni);
	Osoba osoba3("Anes", "IB18420079", "Travnik", punoljetni);
	Osoba osoba4("Midjo", "IB18230079", "Mostar", punoljetni);
	Osoba osoba5("Encika", "IB18023079", "Mostar", punoljetni);
	Osoba osoba6("Idriz", "IB180079", "Mostar", punoljetni);
	



	Kandidat kandidat1("Denis Music", "IB200172");
	Kandidat kandidat2("Elmir Babovic", "IB3123123");




	GlasackiListic glasackiListic1(osoba1, kandidat1);
	GlasackiListic glasackiListic2(osoba2, kandidat2);
	GlasackiListic glasackiListic3(osoba3, kandidat1);
	GlasackiListic glasackiListic4(osoba4, kandidat2);
	GlasackiListic glasackiListic5(osoba5, kandidat2);
	GlasackiListic glasackiListic6(osoba6, kandidat1);


	Izbori izbori("Mostar", 3);

	izbori.AddGlas(glasackiListic1);
	izbori.AddGlas(glasackiListic2);
	izbori.AddGlas(glasackiListic3);
	izbori.AddGlas(glasackiListic4);
	izbori.AddGlas(glasackiListic5);
	izbori.AddGlas(glasackiListic6);

	cout << izbori;





	cout << endl << endl << "||||||||||||||||||||||||||||||||||||||" << endl << endl;


	ProglasiPobjednika(izbori);
	//	


	system("pause>0");
}



#include <iostream>
using namespace std;


// POKAZIVACI 

// 1. ALOKACIJA --> new 

// jedna vrijednost ---> ( ) 

// ako vam treba niz --> vise vrijednosti [ ]

// 2. DEREFERECIRANJE 

// kada hocemo da ispisemo nesto ili da kopiramo nesto sto je pokazivac 

// kada imamo jedna vrijendost ( ) ----> moramo staviti * ispred

// kada je nesto niz [ ] -----> ne stavljamo * ispred 

// 3. DESTURKOTR/ DEALOKACIJA 

// kada je nesto jenda vrijednost ( ) ----> delete _ECTS;

// kada je nesto niz [ ] ----> delete[] _naziv;


class Predmet {
public:
	char* _naziv; // Programiranje 2
	int _ocjena;  //  9
	int* _ECTS;   //  7

	// defaultni konstrutkor 

	Predmet() {

		_ocjena = 5;

		_ECTS = new int(0);

		//char dftNaziv[] = "Nema predmeta";
		const char* dftNaziv1 = "Nema predmeta";

		int vel = strlen(dftNaziv1) + 1;

		_naziv = new char[vel];

		strcpy_s(_naziv, vel, dftNaziv1); // 1. gdje hocemo da kopiramo, 2. koliko necega hocemo da kopiramo, 3. sta hocemo da kopiramo 


	}

	// konstruktor koji prima parametre 


	// Predmet predmet1("Programiranje 2", 9, 7);


	Predmet(const char* naziv, int ocjena, int ects) {

		_ocjena = ocjena;

		_ECTS = new int(ects);


		int vel = strlen(naziv) + 1;

		_naziv = new char[vel];

		strcpy_s(_naziv, vel, naziv); // gdje, koliko , sta

	}

	// copy constructor

	// Predmet KopijaPredmeta2(predmet1); // copy constructor

	// kada imamo & --> posalji mi originalni predmet
	// bez & ----> pravi se kopija predmeta
	// const ---> nesto se ne moze mijenjati


	Predmet(const Predmet& predmet) { // pravi se kopija predmeta


		_ocjena = predmet._ocjena;

		_ECTS = new int(*predmet._ECTS);

		int vel = strlen(predmet._naziv) + 1;

		_naziv = new char[vel];

		strcpy_s(_naziv, vel, predmet._naziv);

	}


	// predmetKopija3 = predmet2; // operator dodjele


	Predmet& operator = (const Predmet& predmet) {


		if (this != &predmet) {


			delete _ECTS;
			delete[] _naziv;




			_ocjena = predmet._ocjena;

			_ECTS = new int(*predmet._ECTS);

			int vel = strlen(predmet._naziv) + 1;

			_naziv = new char[vel];

			strcpy_s(_naziv, vel, predmet._naziv);

		}




		return *this;

	}







	// neki ispis

	void Ispis() {

		cout << "Naziv predmeta : " << _naziv << endl;
		cout << "ECTS : " << *_ECTS << endl;
		cout << "Ocjena predmeta : " << _ocjena << endl;

	}


	// destruktor/dealokacija 

	// alt + 1

	// delete, nullptr

	~Predmet() {

		delete _ECTS;

		_ECTS = nullptr;

		delete[] _naziv;

		_naziv = nullptr;

	}




};



class Student {
	char* _ImePrezime;  // Nema imena i prezimena   <---- niz [ ] char


	Predmet* _polozeni; // <---- niz [ ] ako imamo trenutno i max 
	int _trenutno;      // koji nam kaze koliko imamo pohranjenih predmeta
	int _max;           // koliko maksimlano mozemo imati predmeta u nizu
public:

	Student() {

		const char* dftNaziv = "Nema imena i prezimena";

		int vel = strlen(dftNaziv) + 1;

		_ImePrezime = new char[vel];

		strcpy_s(_ImePrezime, vel, dftNaziv);

		_trenutno = 0;

		_max = 3;

		_polozeni = new Predmet[_max];

	}

	//                 Vedad Keskin      3

	Student(const char* imeprezime, int max) {

		int vel = strlen(imeprezime) + 1;
		_ImePrezime = new char[vel];
		strcpy_s(_ImePrezime, vel, imeprezime);

		_trenutno = 0;
		_max = max;

		_polozeni = new Predmet[_max];

	}


	// Student studentKopija = student; // copy constructor
	Student(const Student& student) {


		int vel = strlen(student._ImePrezime) + 1;
		_ImePrezime = new char[vel];
		strcpy_s(_ImePrezime,vel,student._ImePrezime);

		_max = student._max;
		_trenutno = student._trenutno;

		_polozeni = new Predmet[_max];

		for (int i = 0; i < _trenutno; i++)
		{
			_polozeni[i] = student._polozeni[i];
		}

	}

	// studentOperatorDodjele = student; // operator dodjele

	Student& operator = (const Student& student) {

		if (this != &student) {

			delete[] _ImePrezime;
			delete[] _polozeni;



			int vel = strlen(student._ImePrezime) + 1;
			_ImePrezime = new char[vel];
			strcpy_s(_ImePrezime, vel, student._ImePrezime);

			_max = student._max;
			_trenutno = student._trenutno;

			_polozeni = new Predmet[_max];

			for (int i = 0; i < _trenutno; i++)
			{
				_polozeni[i] = student._polozeni[i];
			}


		}

		return *this;

	}



	~Student() {

		delete[] _ImePrezime;
		_ImePrezime = nullptr;
		delete[] _polozeni;
		_polozeni = nullptr;


	}

	void Ispis() {

		cout << "Ime i prezime studenta : " << _ImePrezime << endl;
		cout << "============ POLOZENI PREDMETI STUDENTA ============" << endl;



		for (int i = 0; i < _trenutno; i++) // i = 0, i = 1, i = 2
		{
			_polozeni[i].Ispis(); // pol[0] , pol[1] , pol[2] 
		}



	}


	// student.AddPolozeniPredmet(predmet1);  ---> MAt2

	void AddPolozeniPredmet(Predmet predmet) {
		//Dodaje novi polozeni predmet u niz
		//Voditi raƒçuna da se ne moze dodavati isti predmet (istog naziva)

		if (_max == _trenutno) { // 3 == 3
			cout << "Student ne moze vise poloziti predmeta" << endl;
			return;
		}


		for (int i = 0; i < _trenutno; i++) // 0 1
		{
			//         MAT2    ==     MAt2  
			//         char*  == char* 
			// strcmp( naziv1 , naziv2   ) == 0


			if ( strcmp( predmet._naziv  , _polozeni[i]._naziv   ) == 0) {
				cout << "Taj predmet je vec polozen" << endl;
				return;
			}


		}




		_polozeni[_trenutno] = predmet; // pol[0] = PR2 ,pol[1] = MAT , 

		_trenutno++; // 0 ----> 1 -----> 2 


	}












};



void main() {

	//Predmet predmet0; // dft constr


	//// Predmet KopijaPredmeta = predmet1; // copy constructor
	//Predmet KopijaPredmeta2(predmet1); // copy constructor


	//Predmet predmetKopija3;

	//predmetKopija3 = predmet2; // operator dodjele


	//predmetKopija3.Ispis();


	Predmet predmet1("Programiranje 2", 9, 7); // <--- konstruktor koji prima parametre 
	Predmet predmet2("Matematika 2", 6, 5); // <--- konstruktor koji prima parametre 
	Predmet predmet3("Web razvoj i dizajn", 7, 5); // <--- konstruktor koji prima parametre 
	Predmet predmet4("Marketing", 8, 4); // <--- konstruktor koji prima parametre 


	Student student("Vedad Keskin",3);


	student.AddPolozeniPredmet(predmet1); // pr2 
	student.AddPolozeniPredmet(predmet2); // mat2
	student.AddPolozeniPredmet(predmet2); // mat2
	student.AddPolozeniPredmet(predmet3); // wrd
	student.AddPolozeniPredmet(predmet4); // mar


	Student studentKopija = student; // copy constructor


	Student studentOperatorDodjele;

	studentOperatorDodjele = studentOperatorDodjele; // operator dodjele


	studentOperatorDodjele.Ispis();







	system("pause>0");
}


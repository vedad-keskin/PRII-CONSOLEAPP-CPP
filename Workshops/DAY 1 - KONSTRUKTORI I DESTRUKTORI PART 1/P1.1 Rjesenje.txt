#include <iostream>
using namespace std;




class Predmet {
public:
	char* _naziv;   // Nema predmeta
	int _ocjena;    // 5
	int* _ECTS;     // 0
	  //Napraviti

	// POKAZIVACI : 

	// 1. ALOKACIJA 

	// new 

	// -- kada je nesto niz --->  [ ]
	// -- kada nesto nije niz ---> ( ) 


	// 2. DEREFERENCIRANJE

	// ako stavis _ECTS   ---> adresu pokazivaca
	// ako stavis *_ECTS  ---> vrijednost ECTS 

	// izuzetak ako je nesto niz

	// ne dodajemo * ---> zato sto bi ispisali samo prvo slovo u nizu

	// *_naziv --->   N 
	// _naziv ---->   Nema predmeta

	// 3. DESKTRUKTOR/ DEALOKACIJA 

	// delete  --> pobrisi vrijednsot
	// nullptr --> adresu proglasi slboodnom

	// ako je nesto niz kada radimo delete dodamo []



	  //1. Defaultni konstruktor
	Predmet() {

		// char _dftNaziv[] = "Nema predmeta";
		const char* dftNaziv = "Nema predmeta";

		int velicina = strlen(dftNaziv) + 1;

        _naziv = new char[velicina];

	    strcpy_s(_naziv,velicina, dftNaziv);   // 1. gdje pohranjujemo, 2. koliko pohranjujemo , 3. sta pohranjemo 


		_ocjena = 5;

		_ECTS = new int(0);

	}
	  //2. Konstruktor koji prima parametre : naziv ocjena i ects


	//     Predmet predmet1("Programiranje 2", 9, 7);
	Predmet(const char* naziv, int ocjena, int ects ) {

		int vel = strlen(naziv) + 1;
		_naziv = new char[vel];
		strcpy_s(_naziv, vel, naziv);

		_ocjena = ocjena;

		_ECTS = new int(ects);

	}

	  //3. Konstruktor kopije

	// Predmet predmet3(predmet1);  pr2 -- 9 -- 7 

	Predmet(const Predmet& predmet) {  // & koristimo original, bez & pravimo kopiju a const znaci da se original ne smije mijenjati

		int vel = strlen(predmet._naziv) + 1;
		_naziv = new char[vel];
		strcpy_s(_naziv, vel, predmet._naziv);

		_ECTS = new int(*predmet._ECTS);

		_ocjena = predmet._ocjena;

	}

	  //4. Operator dodjele
	// predmet4 = predmet3;

	Predmet& operator = (const Predmet& predmet) {

		if (this != &predmet) {

			delete[] _naziv;
			delete _ECTS;


			int vel = strlen(predmet._naziv) + 1;
			_naziv = new char[vel];
			strcpy_s(_naziv, vel, predmet._naziv);

			_ECTS = new int(*predmet._ECTS);

			_ocjena = predmet._ocjena;

		}


		return *this;
	}







	  //5. Ispis ili COUT 

	// Naziv : naziv [7]
	// Ocjena : 7

	void Ispis() {

		cout << "Naziv : " << _naziv << " [" << *_ECTS <<"]" << endl;
		cout << "Ocjena : " << _ocjena << endl;

	}

	  //4. Destruktor

	// ALT + 1 tilda

	~Predmet() {

		delete[] _naziv;
		_naziv = nullptr;

		delete _ECTS;
		_ECTS = nullptr;

	}





};


class Student {
	char* _ImePrezime;

	Predmet* _polozeni; // ---> [ ] -- ( ) 
	int _trenutno;       // koliko imamo predmeta kod studenta
	int _max;            // koliko moze maksimalno imati predmeta student
public:
	//konstruktor kopije, 
	//operator dodjele
	//potrebne funkcije

	//defaultni konstruktor, 

	Student() {

		const char* dftIme = "---";

		int vel = strlen(dftIme) + 1;
		_ImePrezime = new char[vel];
		strcpy_s(_ImePrezime, vel, dftIme);

		_trenutno = 0;
		_max = 5;

		_polozeni = new Predmet[_max];

	}

	//konstruktor,

	Student(const char* imeprezime, int max) {

		int vel = strlen(imeprezime) + 1;
		_ImePrezime = new char[vel];
		strcpy_s(_ImePrezime, vel, imeprezime);

		_trenutno = 0;
		_max = max;
		_polozeni = new Predmet[_max];

	}

	Student(const Student& student) {

		int vel = strlen(student._ImePrezime) + 1;
		_ImePrezime = new char[vel];
		strcpy_s(_ImePrezime, vel, student._ImePrezime);

		_trenutno = student._trenutno;
		_max = student._max;

		_polozeni = new Predmet[_max];

		for (int i = 0; i < _trenutno; i++)
		{
			_polozeni[i] = student._polozeni[i];
		}

	}

	// student3 = student2;

	Student& operator = (const Student& student) {

		if (this != &student) {

			delete[] _ImePrezime;
			delete[] _polozeni;


			int vel = strlen(student._ImePrezime) + 1;
			_ImePrezime = new char[vel];
			strcpy_s(_ImePrezime, vel, student._ImePrezime);

			_trenutno = student._trenutno;
			_max = student._max;

			_polozeni = new Predmet[_max];

			for (int i = 0; i < _trenutno; i++)
			{
				_polozeni[i] = student._polozeni[i];
			}
		}
		return *this;

	}


	//destruktor 

	~Student() {

		delete[] _ImePrezime;
		_ImePrezime = nullptr;

		delete[] _polozeni;
		_polozeni = nullptr;

	}

	void Ispis() {

		cout << "Ime i prezime : " << _ImePrezime << endl;
		cout << "========== POLOZENI PREDMETI : =============" << endl;

		for (int i = 0; i < _trenutno; i++)  // 0 1 2
		{
			_polozeni[i].Ispis();  // polozeni[0] = PR2, polozeni[1] = MAT, polozeni[2] = OS
		}

	}

	
	// student1.AddPolozeniPredmet(predmet1); --> MAT


	void AddPolozeniPredmet(Predmet predmet) {
		//Dodaje novi polozeni predmet u niz
		//Voditi raƒçuna da se ne moze dodavati isti predmet (istog naziva)

		if (_max == _trenutno) {  // 3 
			cout << "Ne mozete dodati vise predmeta" << endl;
			return;
		}

		for (int i = 0; i < _trenutno; i++)
		{
			// kada imamo nizove karaktera char* 

			// kada imamo int float, char --> 1 == 1

			// strcmp(naziv1, naziv2)==0;

			if (strcmp(predmet._naziv,_polozeni[i]._naziv) == 0) {
				cout << "Ne mozete dodati isti predmet" << endl;
				return;
			}
		}



		_polozeni[_trenutno] = predmet; // polozeni[0] = PR2, polozeni[1] = MAT, polozeni[2] = OS

		_trenutno++;  // 0 --->  1  ---> 2 ---> 3

	}













};



void main() {

	//Predmet predmet0;   // <--- dft konstruktor

	//predmet0.Ispis();


	Predmet predmet1("Programiranje 2",9,7);  // obicni konstrutkor
	Predmet predmet2("Matematika 1",6,6);  // obicni konstrutkor
	Predmet predmet3("Operativni sistemi",7,5);  // obicni konstrutkor
	Predmet predmet4("Digitalna logika",6,4);  // obicni konstrutkor

	//predmet1.Ispis();

	//// Predmet predmet2 = predmet1;
	//Predmet predmet3(predmet1);  // <--- copy construktor

	//predmet3.Ispis();

	//Predmet predmet4;  // dft nema naziv 5 0 

	//predmet4 = predmet4;  // operator dodjele

	//predmet4.Ispis();

	Student student1("Vedad Keskin",3);

	student1.AddPolozeniPredmet(predmet1);
	student1.AddPolozeniPredmet(predmet2);
	student1.AddPolozeniPredmet(predmet2);
	student1.AddPolozeniPredmet(predmet3);
	student1.AddPolozeniPredmet(predmet4);


	Student student2 = student1; // <-- copy 

	Student student3;

	student3 = student2; // <--- operator dodjele

	student3.Ispis();




	system("pause>0");
}


#include <iostream>
using namespace std;

char* GetNizKaraktera(const char* tekst) {
	if (tekst == nullptr)
		return nullptr;
	int vel = strlen(tekst) + 1;
	char* novi = new char[vel];
	strcpy_s(novi, vel, tekst);
	return novi;
}


template<class T>
class Kolekcija {
public:
	T* _niz;
	int _max;
	int _trenutno;

	Kolekcija(int max = 3) {

		_trenutno = 0;
		_max = max;

		_niz = new T[_max];

	}

	Kolekcija(const Kolekcija& obj) {

		_trenutno = obj._trenutno;
		_max = obj._max;

		_niz = new T[_max];

		for (int i = 0; i < _trenutno; i++)
		{
			_niz[i] = obj._niz[i];
		}

	}

	Kolekcija& operator = (const Kolekcija& obj) {
		if (this != &obj) {
			delete[] _niz;


			_trenutno = obj._trenutno;
			_max = obj._max;

			_niz = new T[_max];

			for (int i = 0; i < _trenutno; i++)
			{
				_niz[i] = obj._niz[i];
			}
		}
		return *this;
	}

	~Kolekcija() {
		delete[] _niz;
		_niz = nullptr;
	}

	friend ostream& operator << (ostream& COUT, const Kolekcija& obj) {

		for (int i = 0; i < obj._trenutno; i++)
		{
			COUT << obj._niz[i] << endl;
		}

		return COUT;
	}



	void AddElement(T el) {
		// dodaje element u niz


		if (_max == _trenutno) { // baciti exception 
			throw exception("Niz je popunjen");
		}


		for (int i = 0; i < _trenutno; i++)
		{
			//  Zivoitnja == Zivoitnja
			if (el == _niz[i]) {
				throw exception("Dupliranje nije dozvoljeno");
			}
		}



		_niz[_trenutno] = el;

		_trenutno++;

	}




	bool Ukloni() {
		//uklanja zadnji element iz niza

		if (_trenutno == 0) {
			return false;
		}

		_trenutno--;

		return true;

	}


	bool RemoveAt(int lokacija) {
		//uklanja element na određenoj poziciji

		if (lokacija < 0 || lokacija > _trenutno) {
			return false;
		}

		for (int i = lokacija; i < _trenutno - 1; i++)
		{
			_niz[i] = _niz[i + 1];
		}
		_trenutno--;

		return true;

	}


	bool RemoveAt(T el) {
		//Uklanja element koji je jednak proslijeđenom


		for (int i = 0; i < _trenutno; i++)
		{
			if (el == _niz[i]) { // B  = niz[1] = B

				for (int j = i; j < _trenutno - 1; j++)
				{
					_niz[j] = _niz[j + 1];
				}
				_trenutno--;
				return true;

			}
		}

		return false;


	}

	void AddElement(T el, int lokacija) {
		// dodaje element na određenu lokaciju


		if (_trenutno == _max) {
			throw exception("Niz ce izaci izvan opsega ako dodamo novi element");
		}


		for (int i = _trenutno; i > lokacija; i--)
		{
			_niz[i] = _niz[i - 1];
		}

		_niz[lokacija] = el;
		_trenutno++;



	}


	bool Prazan() {
		//vrši provjeru da li je niz prazan


		if (_trenutno == 0) {
			return true;
		}
		else {
			return false;
		}

	}


	T* GetNajmanjiElement() {
		//vraća najmanji element iz niza i to kao pokazivač

		if (Prazan() == true) {
			return nullptr;
		}

		// 5 16 20 4 6 2 

		T* Najmanji = new T(_niz[0]); // 5 


		for (int i = 0; i < _trenutno; i++)
		{

			// Zivotinja  > Zivoitnja  
			if (*Najmanji > _niz[i]) {
				*Najmanji = _niz[i]; // 2
			}
		}


		return Najmanji;

	}


};

class Zivotinja {
private:
	char* _vrsta; // Cuko Maca 
	int _tezina; // 1 3000 
public:



	Zivotinja(const char* vrsta = "---", int tezina = 0) {

		_vrsta = GetNizKaraktera(vrsta);
		_tezina = tezina;

	}

	Zivotinja(const Zivotinja& obj) {
		_vrsta = GetNizKaraktera(obj._vrsta);
		_tezina = obj._tezina;
	}

	Zivotinja& operator = (const Zivotinja& obj) {
		if (this != &obj) {
			delete[] _vrsta;


			_vrsta = GetNizKaraktera(obj._vrsta);
			_tezina = obj._tezina;
		}
		return *this;
	}

	bool operator == (const Zivotinja& obj) {

		if (strcmp(_vrsta, obj._vrsta) == 0) {
			return true;
		}
		else {
			return false;
		}

		//return strcmp(_vrsta, obj._vrsta) == 0;

	}


	bool operator > (const Zivotinja& obj) {

		if (_tezina > obj._tezina) {
			return true;
		}
		else {
			return false;
		}



		// return _tezina > obj._tezina;

	}




	~Zivotinja() {
		delete[] _vrsta;
		_vrsta = nullptr;
	}

	friend ostream& operator << (ostream& COUT, const Zivotinja& obj) {
		COUT << obj._vrsta << " - " << obj._tezina << "kg";
		return COUT;
	}


};

void main() {


	//int ascii = 65; // A 


	//Kolekcija<char> kolekcijaSlova(10);

	//for (int i = 0; i < 8; i++)
	//{
	//	kolekcijaSlova.AddElement(ascii + i); // 65 = A , 66 = B , 67 = C 
	//}

	//try {
	//	//dupliranje nije dozvoljeno 

	//	kolekcijaSlova.AddElement(64);

	//}
	//catch (exception& err) {
	//	cout << err.what() << endl;
	//}

	//kolekcijaSlova.AddElement('Z', 3);


	//try {
	//	//ukoliko nije je popunjen niz baciti exception 

	//	// kolekcijaSlova.AddElement('Z');
	//	
	//}
	//catch (exception& err) {
	//	cout << err.what() << endl;
	//}

	////kolekcijaSlova.Ukloni();

	////kolekcijaSlova.RemoveAt(2);

	////kolekcijaSlova.RemoveAt('B');

	//if (kolekcijaSlova.Prazan() == true) {
	//	cout << "Niz je prazan" << endl;
	//}
	//else {
	//	cout << "Niz nije prazan" << endl;

	//}


	//cout << "Najmanji element niza je " << *kolekcijaSlova.GetNajmanjiElement() << endl;

	//cout << kolekcijaSlova;


	Zivotinja zivotinja1("Maca", 3);
	Zivotinja zivotinja2("Cuko", 7);
	Zivotinja zivotinja3("Slon", 3000);
	Zivotinja zivotinja4("Ptica", 1);
	Zivotinja zivotinja5("Zebra", 300);

	Kolekcija<Zivotinja> zooloski(10);

	zooloski.AddElement(zivotinja1);
	zooloski.AddElement(zivotinja2);
	zooloski.AddElement(zivotinja3);
	zooloski.AddElement(zivotinja4);
	zooloski.AddElement(zivotinja5);

	//zooloski.Ukloni();
	//zooloski.RemoveAt(2);
	//zooloski.RemoveAt(zivotinja1);


	cout << "Najmanja zivotinja je " << *zooloski.GetNajmanjiElement() << endl;


	cout << zooloski;




	system("pause>0");
}

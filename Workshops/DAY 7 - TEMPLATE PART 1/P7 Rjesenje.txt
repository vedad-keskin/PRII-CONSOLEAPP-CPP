#include <iostream>
using namespace std;

char* GetNizKaraktera(const char* tekst) {
	if (tekst == nullptr)
		return nullptr;
	int vel = strlen(tekst) + 1;
	char* novi = new char[vel];
	strcpy_s(novi, vel, tekst);
	return novi;
}


template<class T>
class Kolekcija
{
public:
	T* _niz;
	int _max;
	int _trenutno;

	Kolekcija(int max = 10) {
		_max = max;
		_trenutno = 0;

		_niz = new T[_max];
	}

	Kolekcija(const Kolekcija& obj) {

		_max = obj._max;
		_trenutno = obj._trenutno;

		_niz = new T[_max];

		for (int i = 0; i < _trenutno; i++)
		{
			_niz[i] = obj._niz[i];
		}

	}

	Kolekcija& operator = (const Kolekcija& obj) {
		if (this != &obj) {

			delete[] _niz;

			_max = obj._max;
			_trenutno = obj._trenutno;

			_niz = new T[_max];

			for (int i = 0; i < _trenutno; i++)
			{
				_niz[i] = obj._niz[i];
			}
		}
		return *this;
	}


	~Kolekcija() {
		delete[] _niz;
		_niz = nullptr;
	}

	friend ostream& operator << (ostream& COUT, const Kolekcija& obj) {
		
		for (int i = 0; i < obj._trenutno; i++)
		{
			COUT << obj._niz[i] << endl;
		}

		return COUT;
	}

	void AddElement(T el) {

		if (_max == _trenutno) {
			cout << "Niz je popunjen" << endl;
			return;
		}

		for (int i = 0; i < _trenutno; i++)
		{
			// Zivotinja1 == Zivotinja2
			if (el == _niz[i]) {
				cout << "Taj element je vec dodan" << endl;
				return;
			}
		}


		_niz[_trenutno] = el;  // niz[0] = el
		_trenutno++;           // 0 -> 1


	}


	bool ukloni() {
		//uklanja zadnji element iz niza
		if (_trenutno == 0) {
			return false;
		}


		_trenutno--;
		return true;

	}

	//            C
	bool RemoveAt(T el) {
		//Uklanja element koji je jednak proslijeđenom

		for (int i = 0; i < _trenutno; i++)
		{
			if (el == _niz[i]) {
				//           2     
				for (int j = i; j < _trenutno -1; j++)
				{
					_niz[j] = _niz[j + 1];
				}

				_trenutno--;
				return true;

			}
		}

		return false;
	}

	bool RemoveAt(int lokacija) {
		//uklanja element na određenoj poziciji

		if (lokacija < 0 || lokacija >= _trenutno) {
			return false;
		}


		for (int i = lokacija; i < _trenutno - 1; i++)
		{
			_niz[i] = _niz[i + 1];
		}
		_trenutno--;
		return true;

	}


	bool prazan() {
		//vrši provjeru da li je niz prazan

		if (_trenutno == 0) {
			return true;
		}
		return false;
	}



	T* GetNajmanjiElement() {
		//vraća najmanji element iz niza i to kao pokazivač

		if (prazan()) {
			return nullptr;
		}

		T* Najmanji = new T(_niz[0]);    // prvi element niza  Maca ili A 

		for (int i = 0; i < _trenutno; i++)
		{
			//  1 > 300 
			if (*Najmanji > _niz[i]) {
				*Najmanji = _niz[i];
			}
		}

		return Najmanji;

	}





};

class Zivotinja
{
private:
	char* _vrsta;
	int _tezina;
public:


	Zivotinja(const char* vrsta = "---", int tezina = 0) {
		_vrsta = GetNizKaraktera(vrsta);
		_tezina = tezina;
	}
	Zivotinja(const Zivotinja& obj) {
		_vrsta = GetNizKaraktera(obj._vrsta);
		_tezina = obj._tezina;
	}

	Zivotinja& operator = (const Zivotinja& obj) {
		if (this != &obj) {
			delete[] _vrsta;


			_vrsta = GetNizKaraktera(obj._vrsta);
			_tezina = obj._tezina;
		}
		return *this;
	}

	bool operator == (Zivotinja drugaZivotinja) {
		if (strcmp(_vrsta,drugaZivotinja._vrsta)==0) {
			return true;
		}
		return false;
	}

	bool operator > (Zivotinja drugaZivotinja) {
		if (_tezina > drugaZivotinja._tezina) {
			return true;
		}
		return false;
	}


	~Zivotinja() 
	{ 
		delete[] _vrsta;
		_vrsta = nullptr;
	}

	friend ostream& operator << (ostream& COUT, const Zivotinja& obj) {
		COUT << obj._vrsta << " - " << obj._tezina << "kg";
		return COUT;
	}

	//konstruktor kopije

	//operator < koji poredi dvije životinje po težini

	//operator =

	//operator ==

	//operator<< koji ispisuje vrstu i težinu životinje

};

void main() {
    
	// ASCII 65 -> A

	int vel = 65;
	Kolekcija<char> kolekcijaSlova;

	for (int i = 0; i < 9; i++)
	{
		kolekcijaSlova.AddElement(vel + i);  // 65 66 67 
	}
	
	// kolekcijaSlova.AddElement('A');
	kolekcijaSlova.ukloni(); // uklanja zadnji parametar u nizu
	kolekcijaSlova.RemoveAt('C');
	kolekcijaSlova.RemoveAt(3);

	// cout << kolekcijaSlova;

	cout << "Najmanji element niza je " << *kolekcijaSlova.GetNajmanjiElement() << endl;



	Zivotinja zivotinja1("Cuko", 5);
	Zivotinja zivotinja2("Maca", 3);
	Zivotinja zivotinja3("Zmija", 1);
	Zivotinja zivotinja4("Slon", 3000);
	Zivotinja zivotinja5("Medvjed", 400);

	Kolekcija<Zivotinja> farma(5);

	farma.AddElement(zivotinja1);
	farma.AddElement(zivotinja2);
	farma.AddElement(zivotinja3);
	farma.AddElement(zivotinja4);
	farma.AddElement(zivotinja5);

	//farma.ukloni();  // uklanja zadnjeg medu
	//farma.RemoveAt(zivotinja3); // uklanja kodom zmiju
	//farma.RemoveAt(2);            // uklanja indeksom slona

    cout << farma;
	cout << "Najmanja zivotinja je " << *farma.GetNajmanjiElement() << endl;



	system("pause>0");
}

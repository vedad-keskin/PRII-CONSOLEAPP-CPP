#include <iostream>
using namespace std;

char* GetNizKaraktera(const char* sadrzaj) {
    if (sadrzaj == nullptr)
        return nullptr;
    int vel = strlen(sadrzaj) + 1;
    char* novi = new char[vel];
    strcpy_s(novi, vel, sadrzaj);
    return novi;
}

class Media {
public:
    char* _naslov;
    char* _zanr;
    int _godinaObjavljivanja;
    float _ocjena;

    Media(const char* naslov = "Nema naslova", const char* zanr = "Nema zanr", int godina = 2000, float ocjena = 5) {
        _naslov = GetNizKaraktera(naslov);
        _zanr = GetNizKaraktera(zanr);
        _godinaObjavljivanja = godina;
        _ocjena = ocjena;
    }

    Media(const Media& obj)
    {
        _naslov = GetNizKaraktera(obj._naslov);
        _zanr = GetNizKaraktera(obj._zanr);
        _godinaObjavljivanja = obj._godinaObjavljivanja;
        _ocjena = obj._ocjena;
    }

    Media& operator=(const Media& obj)
    {
        if (this != &obj)
        {
            delete[] _naslov;
            delete[] _zanr;
                    

            _naslov = GetNizKaraktera(obj._naslov);
            _zanr = GetNizKaraktera(obj._zanr);
            _godinaObjavljivanja = obj._godinaObjavljivanja;
            _ocjena = obj._ocjena;
        }
        return *this;
    }

    ~Media() {

        delete[]_naslov; 
        _naslov = nullptr;
        delete[]_zanr; 
        _zanr = nullptr;

    }



    friend ostream& operator <<(ostream& COUT, const Media& obj) {
        COUT << obj._naslov << " (" << obj._godinaObjavljivanja << ") [" << obj._ocjena << "] - " << obj._zanr << endl;
        return COUT;
    }


};

class Serija : public Media {
public:
    int _brojEpizoda;
    int _brojSezona;


    Serija(const char* naslov = "Nema naslova", const char* zanr = "Nema zanr", int godina = 2000, float ocjena = 5, int brEpizoda = 10, int brSezona = 5) : Media(naslov, zanr, godina, ocjena) {

        _brojEpizoda = brEpizoda;
        _brojSezona = brSezona;
    }

    Serija(const Serija& obj) : Media(obj) {

        _brojEpizoda = obj._brojEpizoda;
        _brojSezona = obj._brojSezona;

    }

    Serija& operator=(const Serija& obj)
    {
        if (this != &obj)
        {

            Media::operator=(obj);

            _brojEpizoda = obj._brojEpizoda;
            _brojSezona = obj._brojSezona;

        }
        return *this;
    }




    friend ostream& operator <<(ostream& COUT, const Serija& obj) {
        COUT << obj._naslov << " (" << obj._godinaObjavljivanja << ") [" << obj._ocjena << "] - " << obj._zanr << endl;
        COUT << "Broj sezona : " << obj._brojSezona << endl;
        COUT << "Broj epizoda : " << obj._brojEpizoda << endl;
        return COUT;
    }
};

class Film : public Media
{
public:
    int _trajanje; // misli se na trajanje u minutama



    Film(const char* naslov = "Nema naslova", const char* zanr = "Nema zanr", int godina = 2000, float ocjena = 5, int trajanje = 0) : Media(naslov, zanr, godina, ocjena) {

        _trajanje = trajanje;
    }

    Film(const Film& obj) : Media(obj)
    {
        _trajanje = obj._trajanje;

    }

    Film& operator=(const Film& obj)
    {
        if (this != &obj) {

            Media::operator=(obj);

            _trajanje = obj._trajanje;


        }
        return *this;
    }


    friend ostream& operator <<(ostream& COUT, const Film& obj) {
        COUT << obj._naslov << " (" << obj._godinaObjavljivanja << ") [" << obj._ocjena << "] - " << obj._zanr << endl;
        COUT << "Trajanje : " << obj._trajanje<< "min" << endl;
        return COUT;
    }
};

class Korisnik
{
public:
    char* _korisnickoIme;
    char* _lozinka;

    Film* _pregledaniFilmovi;
    int _maxPregledanihFilmova;
    int _trenutnoPregledanihFilmova;

    Serija* _pregledaneSerije;
    int _maxPregledanihSerija;
    int _trenutnoPregledanihSerija;

    // Implementirati potrebne konstruktore i destruktor

    Korisnik(const char* KorisnickoIme = "test", const char* Lozinka = "test", int maxPF = 3, int maxPS = 3) {
        _korisnickoIme = GetNizKaraktera(KorisnickoIme);
        _lozinka = GetNizKaraktera(Lozinka);
        
        _maxPregledanihFilmova = maxPF;
        _trenutnoPregledanihFilmova = 0;
        _pregledaniFilmovi = new Film[_maxPregledanihFilmova];
        
        _trenutnoPregledanihSerija = 0;
        _maxPregledanihSerija = maxPS;
        _pregledaneSerije = new Serija[_maxPregledanihSerija];
    }

    Korisnik(const Korisnik& obj)
    {
        _korisnickoIme = GetNizKaraktera(obj._korisnickoIme);
        _lozinka = GetNizKaraktera(obj._lozinka);
        
        _maxPregledanihFilmova = obj._maxPregledanihFilmova;
        _trenutnoPregledanihFilmova = obj._trenutnoPregledanihFilmova;
        _pregledaniFilmovi = new Film[_maxPregledanihFilmova];

        for (int i = 0; i < _trenutnoPregledanihFilmova; i++)
        {
            _pregledaniFilmovi[i] = obj._pregledaniFilmovi[i];
        }

        _trenutnoPregledanihSerija = obj._trenutnoPregledanihSerija;
        _maxPregledanihSerija = obj._maxPregledanihSerija;
        _pregledaneSerije = new Serija[_maxPregledanihSerija];
        for (int i = 0; i < _trenutnoPregledanihSerija; i++)
        {
            _pregledaneSerije[i] = obj._pregledaneSerije[i];
        }
    }

    Korisnik& operator=(const Korisnik& obj) {
        if (this != &obj)
        {
            delete[] _korisnickoIme;
            delete[] _lozinka;
            delete[] _pregledaniFilmovi;
            delete[] _pregledaneSerije;

            _korisnickoIme = GetNizKaraktera(obj._korisnickoIme);
            _lozinka = GetNizKaraktera(obj._lozinka);

            _maxPregledanihFilmova = obj._maxPregledanihFilmova;
            _trenutnoPregledanihFilmova = obj._trenutnoPregledanihFilmova;
            _pregledaniFilmovi = new Film[_maxPregledanihFilmova];

            for (int i = 0; i < _trenutnoPregledanihFilmova; i++)
            {
                _pregledaniFilmovi[i] = obj._pregledaniFilmovi[i];
            }

            _trenutnoPregledanihSerija = obj._trenutnoPregledanihSerija;
            _maxPregledanihSerija = obj._maxPregledanihSerija;
            _pregledaneSerije = new Serija[_maxPregledanihSerija];
            for (int i = 0; i < _trenutnoPregledanihSerija; i++)
            {
                _pregledaneSerije[i] = obj._pregledaneSerije[i];
            }
        }
        return *this;
    }

    ~Korisnik() {
        delete[] _korisnickoIme; _korisnickoIme = nullptr;
        delete[] _lozinka; _lozinka = nullptr;
        delete[] _pregledaniFilmovi; _pregledaniFilmovi = nullptr;
        delete[] _pregledaneSerije; _pregledaneSerije = nullptr;
    }



    friend ostream& operator <<(ostream& COUT, const Korisnik& obj) {
        COUT << obj._korisnickoIme << " " << obj._lozinka << endl;
        COUT << "Pregledane serije: " << endl;
        for (int i = 0; i < obj._trenutnoPregledanihSerija; i++)
        {
            COUT << obj._pregledaneSerije[i];
        }
        COUT << "Pregledani filmovi: " << endl;
        for (int i = 0; i < obj._trenutnoPregledanihFilmova; i++)
        {
            COUT << obj._pregledaniFilmovi[i];
        }

        return COUT;
    }


    bool IsUserDataValid(const char* username, const char* password)
    {
        // Funkcija vraca true false u ovisnosti od toga da li su proslijedjeni podaci tacni
        // Odnosno da li se korisnik moze logirati ili ne
        if (strcmp(username, _korisnickoIme) == 0 && strcmp(password, _lozinka) == 0) {
            return true;
        }
        return false;

        // return (strcmp(username, korisnickoIme) == 0 && strcmp(password, lozinka) == 0);

    }

    bool DodajFilm(Film film)
    {
        // Funkcija ima za cilj dodavanje novog filma u niz pregldanih.
        // Voditi racuna da se ne mogu dodati dva ista filma (to su filmovi koji imaju isti naziv i godinu izdavanja)

        if (_maxPregledanihFilmova == _trenutnoPregledanihFilmova) {
            return false;
        }

        for (int i = 0; i < _trenutnoPregledanihFilmova; i++)
        {
            if (strcmp(_pregledaniFilmovi[i]._naslov, film._naslov) == 0 && film._godinaObjavljivanja == _pregledaniFilmovi[i]._godinaObjavljivanja) {
                cout << "Film je vec pregledan" << endl;
                return false;
            }
        }

        _pregledaniFilmovi[_trenutnoPregledanihFilmova] = film;
        _trenutnoPregledanihFilmova++;
        return true;

    }

    bool DodajSeriju(Serija serija)
    {
        // Funkcija ima za cilj dodavanje nove serije u niz pregldanih.
        // Voditi racuna da se ne mogu dodati dvije iste serije (to su serije koje imaju isti naziv i godinu izdavanja)

        if (_maxPregledanihSerija == _trenutnoPregledanihSerija) {
            return false;
        }

        for (int i = 0; i < _trenutnoPregledanihSerija; i++)
        {
            if (strcmp(_pregledaneSerije[i]._naslov, serija._naslov) == 0 && serija._godinaObjavljivanja == _pregledaneSerije[i]._godinaObjavljivanja) {
                cout << "Serija je vec pregledan" << endl;
                return false;
            }
        }

        _pregledaneSerije[_trenutnoPregledanihSerija] = serija;
        _trenutnoPregledanihSerija++;
        return true;


    }

    Film* GetNajnovijiFilm() // 0 
    {
        // Funkcija kao rezultat vraca pokazivac na najnoviji film kojeg je korisnik odgledao
        if (_trenutnoPregledanihFilmova == 0) {
            return nullptr;
        }

        int najvecaGodina = INT_MIN;  // 2011
        int pozicija = 0;

        for (int i = 0; i < _trenutnoPregledanihFilmova; i++)// 2011 2023 2007 2013 1231 123 123 213 123 123 1231231 
        {
            if (_pregledaniFilmovi[i]._godinaObjavljivanja > najvecaGodina) { // 2007 > 2023
                najvecaGodina = _pregledaniFilmovi[i]._godinaObjavljivanja; // 2023
                pozicija = i;                                              // 1
            }
        }

        return new Film(_pregledaniFilmovi[pozicija]);
    }





    Serija* GetNajboljaSerija()
    {
        // Funkcija kao rezultat vraca pokazivac na seriju sa najvecom ocjenu koju je korisnik odgledao

        if (_trenutnoPregledanihSerija == 0) {
            return nullptr;
        }

        int najboljaSerija = INT_MIN;
        int pozicija = 0;

        for (int i = 0; i < _trenutnoPregledanihSerija; i++)
        {
            if (_pregledaneSerije[i]._ocjena > najboljaSerija) { // 9 > 9
                najboljaSerija = _pregledaneSerije[i]._ocjena;
                pozicija = i;
            }
        }
        return new Serija(_pregledaneSerije[pozicija]);
    }
};

void main()
{





    system("PAUSE>0");
}

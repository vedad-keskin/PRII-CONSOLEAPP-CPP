#include <iostream>
using namespace std;


char* GetNizKaraktera(const char* sadrzaj) {

	int vel = strlen(sadrzaj) + 1;
	char* novi = new char[vel];
	strcpy_s(novi, vel, sadrzaj);
	return novi;

}



class Osoba {
protected:
	char* _Imeprezime;    // ----> [ ] char
	char* _JMBG;		  // ----> [ ] char
public:

	//                  Denis Music                  213123123123
	Osoba(const char* imeprezime = "---", const char* jmbg = "---") {

		_Imeprezime = GetNizKaraktera(imeprezime);
		_JMBG = GetNizKaraktera(jmbg);

	}

	Osoba(const Osoba& obj) {

		_Imeprezime = GetNizKaraktera(obj._Imeprezime);
		_JMBG = GetNizKaraktera(obj._JMBG);

	}

	Osoba& operator = (const Osoba& obj) {
		if (this != &obj) {

			delete[] _Imeprezime;
			delete[] _JMBG;


			_Imeprezime = GetNizKaraktera(obj._Imeprezime);
			_JMBG = GetNizKaraktera(obj._JMBG);
		}
		return *this;
	}

	virtual ~Osoba() {

		delete[] _Imeprezime;
		_Imeprezime = nullptr;
		delete[] _JMBG;
		_JMBG = nullptr;

	}

	virtual void Info() = 0; // klasa osoba postaje apstraktna 



	friend ostream& operator << (ostream& COUT, const Osoba& obj) {


		COUT << obj._Imeprezime<<" ["<<obj._JMBG<<"]" << endl;


		return COUT;
	}


};








class Profesor : public Osoba { // 1. korak kod nasljedjivanja 
public:
	char* _titula;

	//            Profesor profesor1("doc. dr."   , "Denis Music",                 "312313123123");
	Profesor(const char* titula = "prof.", const char* imeprezime = "---", const char* jmbg = "---"):Osoba(imeprezime,jmbg) { // 2. korak kod nasljedjivanja spojiti konstruktor klase profesor sa konsturktorom klase osoba

		_titula = GetNizKaraktera(titula);

	}


	Profesor(const Profesor& obj):Osoba(obj) { // 3. korak kod nasljedjivanja spotiti copy sa copy klase osoba

		_titula = GetNizKaraktera(obj._titula);

	}


	Profesor& operator = (const Profesor& obj) {
		if (this != &obj) {

			delete[] _titula;

			Osoba::operator=(obj); // 4. korak kod nasljedjivanja spojiti  op = sa op = osoba


			_titula = GetNizKaraktera(obj._titula);

		}
		return *this;
	}


	~Profesor() {

		delete[] _titula;
		_titula = nullptr;

	}

	void Info() {  // 5. korak kod nasljedjivanja
		cout << *this;
	}
	

	friend ostream& operator << (ostream& COUT, const Profesor& obj) {


		COUT << obj._titula<<" "<< obj._Imeprezime << " [" << obj._JMBG << "]" << endl;


		//COUT << obj._titula << " ";
		//COUT << Osoba(obj);


		return COUT;
	}





};


class Predmet {
public:
	char* _naziv;                   // niz [ ] char
	int* _ECTS;                     // int ( ) 
	Profesor* _predmetniProfesor;   // ako nema trenutno i max onda ovo nije 100% niz ----->  ( ) 


	Predmet(const char* naziv = "---", int ects = 0, Profesor profesor = Profesor()   ) {

		_naziv = GetNizKaraktera(naziv);
		_ECTS = new int(ects);
		_predmetniProfesor = new Profesor(profesor);

	}

	Predmet(const Predmet& obj) {

		_naziv = GetNizKaraktera(obj._naziv);
		_ECTS = new int(*obj._ECTS);
		_predmetniProfesor = new Profesor(*obj._predmetniProfesor);

	}

	Predmet& operator = (const Predmet& obj) {
		if (this != &obj) {

			delete[] _naziv;
			delete _ECTS;
			delete _predmetniProfesor;


			_naziv = GetNizKaraktera(obj._naziv);
			_ECTS = new int(*obj._ECTS);
			_predmetniProfesor = new Profesor(*obj._predmetniProfesor);

		}
		return *this;
	}

	~Predmet() {

		delete[] _naziv;
		_naziv = nullptr;
		delete _ECTS;
		_ECTS = nullptr;
		delete _predmetniProfesor;
		_predmetniProfesor = nullptr;

	}


	friend ostream& operator << (ostream& COUT, const Predmet& obj) {

		COUT << obj._naziv << " [" << *obj._ECTS << "] - kojeg predaje " << *obj._predmetniProfesor;

		return COUT;
	}


};


class Student : public Osoba { // 1. korak
public:
	char* _BrojIndeksa;            // char [ ] niz 
	Predmet* _polozeniPredmeti;    // niz Predmeta [ ]
	int* _trenutno;                // int ( ) 
	int _max;

	Student(const char* indeks = "IB00000",int max = 3, const char* imeprezime = "---",const char* jmbg = "---")
		:Osoba(imeprezime,jmbg) { // 2. korak kod nasljedjivanja

		_BrojIndeksa = GetNizKaraktera(indeks);

		_trenutno = new int(0);
		_max = max;

		_polozeniPredmeti = new Predmet[_max];


	}

	Student(const Student& obj):Osoba(obj) { // 3. korak kod nasljedjivanja spojiti copy sa copy Osobe

		_BrojIndeksa = GetNizKaraktera(obj._BrojIndeksa);

		_trenutno = new int(*obj._trenutno);
		_max = obj._max;

		_polozeniPredmeti = new Predmet[_max];

		for (int i = 0; i < *_trenutno; i++)
		{
			_polozeniPredmeti[i] = obj._polozeniPredmeti[i];
		}

	}

	Student& operator = (const Student& obj) {
		if (this != &obj) {
			delete[] _BrojIndeksa;
			delete[] _polozeniPredmeti;
			delete _trenutno;


			
			Osoba::operator=(obj); // 4. korak 


			_BrojIndeksa = GetNizKaraktera(obj._BrojIndeksa);

			_trenutno = new int(*obj._trenutno);
			_max = obj._max;

			_polozeniPredmeti = new Predmet[_max];

			for (int i = 0; i < *_trenutno; i++)
			{
				_polozeniPredmeti[i] = obj._polozeniPredmeti[i];
			}
		}
		return*this;
	}

	~Student() {

		delete[] _BrojIndeksa;
		_BrojIndeksa = nullptr;
		delete[] _polozeniPredmeti;
		_polozeniPredmeti = nullptr;
		delete _trenutno;
		_trenutno = nullptr;


	}


	friend ostream& operator << (ostream& COUT, const Student& obj) {
		COUT << obj._Imeprezime<<" ["<<obj._BrojIndeksa<<"] - ("<<obj._JMBG<<")" << endl;

		COUT << endl << "POLOZENI PREDMETI STUDENTA : " << endl << endl;

		for (int i = 0; i < *obj._trenutno; i++)
		{
			COUT << obj._polozeniPredmeti[i];
		}

		return COUT;
	}


	void Info() { // 5. korak 
		cout << *this;
	}


	void DodajPredmet(Predmet predmet) {

		if (_max == *_trenutno) {
			cout << "Niz je popunjen" << endl;
			return;
		}

		for (int i = 0; i < *_trenutno; i++)
		{
			if (strcmp(predmet._naziv , _polozeniPredmeti[i]._naziv) == 0) {
				cout << "Taj predmet je vec polozen" << endl;
				return;
			}
		}



		_polozeniPredmeti[*_trenutno] = predmet;

		(*_trenutno)++;

	}



};







void main() {

	//Profesor profesorKopija = profesor1;

	//Profesor profesorOperator;
	//profesorOperator = profesor1;

	//profesorOperator.Info();
	//cout << profesorOperator;


	Profesor profesor1("doc. dr.", "Denis Music", "312313123123");
	Profesor profesor2("doc. dr.", "Elmir Babovic", "312313123123");
	Profesor profesor3("doc. dr.", "Nina Bijedic", "312313123123");

	Predmet predmet1("Programiranje 2", 7, profesor1);
	Predmet predmet2("Web razvoj i dizajn", 6, profesor2);
	Predmet predmet3("Matmatika 2", 5, profesor3);

	Student student("IB180079", 3, "Vedad Keskin", "1212998150001");

	student.DodajPredmet(predmet1);
	student.DodajPredmet(predmet2);
	student.DodajPredmet(predmet2);
	student.DodajPredmet(predmet3);
	student.DodajPredmet(predmet3);

	Student studentKopija = student;

	Student studentOperatorDodjele;
	studentOperatorDodjele = studentKopija;


	studentOperatorDodjele.Info();


	system("PAUSE>0");
}
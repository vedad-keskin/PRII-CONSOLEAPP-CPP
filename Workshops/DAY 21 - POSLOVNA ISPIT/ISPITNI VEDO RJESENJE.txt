#include <iostream>
#include <vector>
using namespace std;

/****************************************************************************
1. SVE KLASE TREBAJU POSJEDOVATI ADEKVATAN DESTRUKTOR
2. NAMJERNO IZOSTAVLJANJE KOMPLETNIH I/ILI POJEDINIH DIJELOVA DESTRUKTORA KOJI UZROKUJU RUNTIME ERROR ?E BITI OZNACENO KAO "RE"
3. SPAŠAVAJTE PROJEKAT KAKO BI SE SPRIJE?ILO GUBLJENJE URA?ENOG ZADATKA
4. NAZIVI FUNKCIJA, TE BROJ I TIP PARAMETARA MORAJU BITI IDENTI?NI ONIMA KOJI SU KORIŠTENI U TESTNOM CODE-U, OSIM U SLU?AJU DA POSTOJI ADEKVATAN RAZLOG ZA NJIHOVU MODIFIKACIJU. OSTALE, POMO?NE FUNKCIJE MOŽETE IMENOVATI I DODAVATI PO ŽELJI.
5. IZUZETAK BACITE U FUNKCIJAMA U KOJIMA JE TO NAZNA?ENO.
****************************************************************************/
const char* crt = "\n-------------------------------------------\n";
const char* nedozvoljena_operacija = "Nedozvoljena operacija";
const char* not_set = "NOT_SET";
const int min_polgavlja = 3;
const int min_karaktera_po_poglavlju = 30;

char* AlocirajNizKaraktera(const char* sadrzaj)
{
	if (sadrzaj == nullptr)
		return nullptr;
	int vel = strlen(sadrzaj) + 1;
	char* temp = new char[vel];
	strcpy_s(temp, vel, sadrzaj);
	return temp;
}


//              int       int
template <class T1, class T2>
class Kolekcija
{
	T1* _elementi1 = nullptr; // int char ZavrsniRad
	T2* _elementi2 = nullptr;
	int* _trenutno = nullptr;
public:

	Kolekcija()
	{
		_trenutno = new int(0);


		_elementi1 = new T1[*_trenutno]; // ctrl + d
		_elementi2 = new T2[*_trenutno];

	}

	// implementirati copy ctor
	Kolekcija(const Kolekcija& obj)
	{
		_trenutno = new int(*obj._trenutno);

		_elementi1 = new T1[*_trenutno]; // ctrl + d
		_elementi2 = new T2[*_trenutno];


		for (int i = 0; i < *_trenutno; i++)
		{
			_elementi1[i] = obj._elementi1[i];
			_elementi2[i] = obj._elementi2[i];
		}


	}



	// implementirati operator dodjele
	Kolekcija& operator=(const Kolekcija& obj)
	{
		if (this != &obj) {

			delete[] _elementi1;
			delete[] _elementi2;
			delete _trenutno;



			_trenutno = new int(*obj._trenutno);

			_elementi1 = new T1[*_trenutno]; // ctrl + d
			_elementi2 = new T2[*_trenutno];


			for (int i = 0; i < *_trenutno; i++)
			{
				_elementi1[i] = obj._elementi1[i];
				_elementi2[i] = obj._elementi2[i];
			}
		}



		return *this;
	}

	~Kolekcija()
	{
		delete[] _elementi1;
		_elementi1 = nullptr;
		delete[] _elementi2;
		_elementi2 = nullptr;
		delete _trenutno;
		_trenutno = nullptr;
	}


	T1* getElementi1Pok() { return _elementi1; }
	T2* getElementi2Pok() { return _elementi2; }
	T1& getElement1(int lokacija) const
	{
		if (lokacija < 0 || lokacija >= *_trenutno)
			throw exception("Nevalidna lokacija");
		return _elementi1[lokacija];
	}
	T2& getElement2(int lokacija) const
	{
		if (lokacija < 0 || lokacija >= *_trenutno)
			throw exception("Nevalidna lokacija");
		return _elementi2[lokacija];
	}
	int getTrenutno() const
	{
		if (_trenutno == nullptr)
			return 0;
		return *_trenutno;
	}

	friend ostream& operator<<(ostream& COUT, Kolekcija<T1, T2>& obj)
	{
		for (size_t i = 0; i < obj.getTrenutno(); i++) // 0 1 2 3
			COUT << obj.getElement1(i) << " " << obj.getElement2(i) << endl;
		return COUT;
	}

	// potrebno je implementirati funkciju Add za klasu kolekcija na nacin da se svaki novi el1 doda na kraj niza _elemnti1, a svaki novi el2 na kraj niza _elementi2
	// voditi racuna o tome da prije dodavanja novih elementa treba prosiriti velcinu nizova bez gubljenja prethodno spremljenjih vrijednosti

	//          2        2   
	void Add(T1 el1, T2 el2)
	{

		// 1. napraviti neki temp koji ce imati nase dosadasnje vrijednosti

		T1* temp1 = _elementi1;
		T2* temp2 = _elementi2;

		// 2. prosiriti nas niz na moze primiti jos jedan element

		_elementi1 = new T1[*_trenutno + 1];
		_elementi2 = new T2[*_trenutno + 1];

		// 3. vratiti iz tempa stare vrijednosti

		for (int i = 0; i < *_trenutno; i++)
		{
			_elementi1[i] = temp1[i];
			_elementi2[i] = temp2[i];
		}

		// 4. klasicna pohrana

		_elementi1[*_trenutno] = el1;
		_elementi2[*_trenutno] = el2;

		(*_trenutno)++; // -> 3 --> 4 




	}


};


class Poglavlje
{
	char* _naslov;
	char* _sadrzaj;
	bool _prihvaceno;
	int _ocjena; // da bi se poglavlje smatralo prihvacenim ocjena mora biti u opsegu od 6 - 10
public:

	int PrebrojiBrojSlovaUSadrzaju() {

		int vel = strlen(_sadrzaj);

		return vel;

	}

	// zavrsiti implementaciju user-def. ctor-a
	Poglavlje(const char* naslov = nullptr, const char* sadrzaj = nullptr) : _ocjena(0), _prihvaceno(false)
	{
		_naslov = AlocirajNizKaraktera(naslov);
		_sadrzaj = AlocirajNizKaraktera(sadrzaj);
	}


	// implementirati copy ctor
	Poglavlje(const Poglavlje& obj)
	{
		_naslov = AlocirajNizKaraktera(obj._naslov);
		_sadrzaj = AlocirajNizKaraktera(obj._sadrzaj);
		_prihvaceno = obj._prihvaceno;
		_ocjena = obj._ocjena;

	}


	// implementirati operator dodjele
	Poglavlje& operator=(const Poglavlje& obj)
	{

		if (this != &obj) {

			delete[] _naslov;
			delete[] _sadrzaj;


			_naslov = AlocirajNizKaraktera(obj._naslov);
			_sadrzaj = AlocirajNizKaraktera(obj._sadrzaj);
			_prihvaceno = obj._prihvaceno;
			_ocjena = obj._ocjena;

		}


		return *this;
	}

	~Poglavlje()
	{
		delete[] _naslov;
		_naslov = nullptr;
		delete[] _sadrzaj;
		_sadrzaj = nullptr;
	}

	friend ostream& operator<<(ostream& COUT, Poglavlje& obj)
	{
		if (obj._naslov == nullptr || obj._sadrzaj == nullptr)
			return COUT;
		COUT << endl
			<< obj._naslov << endl
			<< obj._sadrzaj << endl;
		if (obj._prihvaceno)
			COUT << "Ocjena: " << obj._ocjena << endl;
		;
		return COUT;
	}
	char* GetNaslov() const { return _naslov; }
	char* GetSadrzaj() const { return _sadrzaj; }
	bool GetPrihvaceno() const { return _prihvaceno; }
	int GetOcjena() const { return _ocjena; }

	void SetSadrzaj(const char* s)
	{
		delete[] _sadrzaj;
		_sadrzaj = AlocirajNizKaraktera(s);
	}

	void OcijeniPoglavlje(int ocjena)
	{
		_ocjena = ocjena;
		if (_ocjena > 5 && ocjena <= 10)
			_prihvaceno = true;
	}

	// _sadrzaj =  U ovom poglavlju ce biti rijeci o multimedijalnim sistemima
	// noviSadrzaj = o multimedijalnim sistemima
	void DodjelaSadrzaja(const char* noviSadrzaj) {
		//                               U ovom poglavlju ce biti rijeci o multimedijalnim sistemima
		char* temp = AlocirajNizKaraktera((string(_sadrzaj) + " " + noviSadrzaj).c_str());


		_sadrzaj = temp;
	}


};

class ZavrsniRad
{
	char* _tema;
	vector<Poglavlje> _poglavljaRada;
	string _datumOdbrane;
	float _konacnaOcjena; // prosjek ocjena svih poglavlja u zavrsnom radu koja se izracunava u momentu zakazivanja odbrane
public:

	int PrebrojiBrojPoglavalja() {

		int brojac = 0;

		for (int i = 0; i < _poglavljaRada.size(); i++)
		{
			brojac++; // 1 2 3 4
		}

		return brojac;
	}


	ZavrsniRad(const char* nazivTeme = nullptr) : _konacnaOcjena(0), _datumOdbrane(not_set), _poglavljaRada()
	{
		// za vector i Kolekcija ako ih imas u user-def contr za njih ne radimo nista

		_tema = AlocirajNizKaraktera(nazivTeme);

	}

	// zavrsiti implementaciju copy ctor-a
	ZavrsniRad(const ZavrsniRad& org) : _poglavljaRada(org._poglavljaRada), _konacnaOcjena(org._konacnaOcjena), _datumOdbrane(org._datumOdbrane)
	{
		// kopiranje vectora : 
		// _poglavljaRada = org._poglavljaRada;

		_tema = AlocirajNizKaraktera(org._tema);
	}

	~ZavrsniRad()
	{
		delete[] _tema;
		_tema = nullptr;
	}
	char* GetNazivTeme() const { return _tema; }
	vector<Poglavlje>& GetPoglavlja() { return _poglavljaRada; };
	string GetDatumOdbrane() const { return _datumOdbrane; }
	float GetOcjena() { return _konacnaOcjena; }


	void SetDatumOdbrane(string datumOdbrane) { _datumOdbrane = datumOdbrane; }


	// operator dodjele je vec implementiran za ovu klasu, nema potrebe za izmjenom
	ZavrsniRad& operator=(const ZavrsniRad& org)
	{
		if (this != &org)
		{
			delete[] _tema;


			_tema = AlocirajNizKaraktera(org._tema);
			_datumOdbrane = org._datumOdbrane;
			_poglavljaRada = org._poglavljaRada;
			_konacnaOcjena = org._konacnaOcjena;
		}
		return *this;
	}

	friend ostream& operator<<(ostream& COUT, ZavrsniRad& obj)
	{
		COUT << "Tema rada: " << obj._tema << endl;
		COUT << "Sadrzaj: " << endl;
		for (size_t i = 0; i < obj._poglavljaRada.size(); i++)
			COUT << obj._poglavljaRada[i] << endl;
		COUT << "Datum odbrane rada: " << obj._datumOdbrane << endl
			<< " Ocjena: " << obj._konacnaOcjena << endl;
		return COUT;
	}

	// završiti implementaciju funkcije
	/*u zavrsni rad dodaje novo poglavlje i njegov sadrzaj. ukoliko poglavlje vec postoji u zavrsnom radu, funkcija tom poglavlju treba dodati novi sadrzaj i pri tome zadrzi
	postojeci (izmedju postojeceg i novog sadrzaja se dodaje prazan prostor). u slucaju da poglavlje ne postoji, ono se dodaje zajedno sa sadrzaje*/

	//                               Uvod
	void DodajPoglavlje(const char* naslov, const char* sadrzaj)
	{

		for (int i = 0; i < _poglavljaRada.size(); i++) // 0 1 2 3
		{
			//  Uvod == Uvod 
			// char* == char* 
			// strcmp( naziv1, naziv2 ) == 0

			if (strcmp(naslov, _poglavljaRada[i].GetNaslov()) == 0) {

				_poglavljaRada[i].DodjelaSadrzaja(sadrzaj);

				return;
			}


		}


		Poglavlje novoPoglavlje(naslov, sadrzaj); // Uvod -- adasdasasd

		_poglavljaRada.push_back(novoPoglavlje);

	}

	// zavrsiti implementaciju funkcije
	/*funkcija OcijeniPoglavlje, na osnovu naziva poglavlja, dodjeljuje ocjenu poglavlju te ukoliko je ocjena pozitivna (6 - 10) onda poglavlje oznacava prihvacenim.
	U slucaju da ocjena nije validna ili poglavlje ne postoji, funkcija baca izuzetak sa odgovarajucom porukom*/

	//                                UVOD
	void OcijeniPoglavlje(const char* naziv, int ocjena)
	{

		for (int i = 0; i < _poglavljaRada.size(); i++)
		{
			// i = 0 UVOD == UVOD
			// i = 1 UVOD == VRSTE 
			// i = 2 UVOD == TEORIJA
			// i = 3 UVOD == ZAKLJUCAK


			if (strcmp(naziv, _poglavljaRada[i].GetNaslov()) == 0) {

				// poglavlje[0] = UVOD 
				_poglavljaRada[i].OcijeniPoglavlje(ocjena);
				return;
			}
		}

		// BACITI IZUZETAK AKO POGLAVLJE NE POSTOJI

		throw exception("Poglavlje ne postoji");


	}

	// potrebno je implementirati opertor usporedbe (==) za klasu ZavrsniRad, porediti samo naziv teme
	bool operator == (ZavrsniRad zr) // zr1 == zr2 
	{
		// char* == char*  -> strcmp () == 0
		// int == int

		if (strcmp(_tema, zr._tema) == 0) {
			return true;
		}
		else {
			return false;
		}


	}

	// potrebno je izracunati prosjecnu ocjenu za sva poglavlja rada koja se nalaze u vektoru _poglavljaRada i vratiti tu vrijednost iz funkcije
	float prosjecnaOcjena()
	{
		// 8 + 8 + 9 + 9 = 32

		float suma = 0;
		float brojac = 0;

		for (int i = 0; i < _poglavljaRada.size(); i++) // 0 1 2 3
		{
			suma += _poglavljaRada[i].GetOcjena(); // + 8 + 8 + 9 + 7 = 32
			brojac++; //                              1 2 3 4 
		}

		if (brojac == 0) {
			return 0;
		}



		return suma / brojac; // 32 / 4 = 8


	}
	// implementirati setersku funkciju za atribut _konacnaOcjena
	void SetKonacnaOcjena(float o)
	{
		_konacnaOcjena = o;
	}
};

class Mentor
{
	char* _imePrezime;
	// Parametar string predstavlja broj indeksa studenta koji prijavljuje zavrsni rad kod odredjenog Mentora
	Kolekcija<const char*, ZavrsniRad> _teme;

public:
	// zavrsiti implementaciju copy ctor-a
	Mentor(const Mentor& obj) : _teme(obj._teme)
	{
		// kopiranje kolekcije: 
		// _teme = obj._teme;

		_imePrezime = AlocirajNizKaraktera(obj._imePrezime);

	}
	// implementirati user-def. ctor, dodijeliti samo odgovarajucu vrijednost atributu _imePrezime
	Mentor(const char* imePrezime)
	{
		_imePrezime = AlocirajNizKaraktera(imePrezime);

		// ako imas kolekciju u user-def ne radimo nista

	}
	// zavrsiti implementaciju operatora dodjele
	Mentor& operator=(const Mentor& obj)
	{
		if (this != &obj) {

			delete[] _imePrezime;


			_imePrezime = AlocirajNizKaraktera(obj._imePrezime);
			_teme = obj._teme;

		}

		return *this;
	}

	~Mentor()
	{
		delete[] _imePrezime;
		_imePrezime = nullptr;
	}
	Kolekcija<const char*, ZavrsniRad>& GetTeme() { return _teme; };
	char* GetImePrezime() { return _imePrezime; }


	void Info()
	{
		cout << _imePrezime << endl
			<< _teme << endl;
	}

	/*funkcija DodajZavrsniRad ima zadatak da odredjenom Mentoru dodijeli mentorstvo na zavrsnom radu. zavrsni rad se dodaje studentu sa brojem indeksa proslijedjenim kao
	prvi parametar. sprijeciti dodavanje zavrsnih radova sa istom temom*/



	bool DodajZavrsniRad(const char* brojIndeksa, ZavrsniRad zr)
	{

		for (int i = 0; i < _teme.getTrenutno(); i++)
		{
			// char* => niz karaktera

			if (zr == _teme.getElement2(i) || strcmp( brojIndeksa , _teme.getElement1(i))==0  ) {

				return false;
			}
		}


		_teme.Add(brojIndeksa, zr);

		return true;


	}

	/*funkcija ZakaziOdbranuRada ima zadatak da studentu sa proslijedjenim brojem indeksa zakaze odbranu zavrsnog rada sto podrazumijeva definisanje
datuma odbrane. odbrana rada se moze zakazati samo studentu koji je rad prethodno prijavio i pri tom su zadovoljeni sljedeci uslovi:
	1. zavrsni rad ima broj poglavlja veci od minimalnog
	2. svako poglavlje ima broj karaktera veci od minimalnog
	3. svako poglavlje je prihvaceno/odobreno
ukoliko su zadovoljeni prethodni kriteriji, izracunava se konacna ocjena rada (prosjek ocjena svih poglavlja), postavlja datum odbrane rada i vraca pokazivac na rad kome je zakazan odbrana.
u slucaju da student sa primljenim brojem indeksa nije prijavio zavrsni rad ili neki od postavljenih kriterija nije zadovoljen, funkcija vraca nullptr.
*/

//parametri:brojIndeksa, datumOdbrane
	ZavrsniRad* ZakaziOdbranuRada(const char* brojIndeksa, string datum)
	{

		for (int i = 0; i < _teme.getTrenutno(); i++)
		{
			// PRONASLI SMO STUDENTA SA TIM BROJEM INDEXA
			if (strcmp(brojIndeksa , _teme.getElement1(i)) == 0) {


				// 1. zavrsni rad ima broj poglavlja veci od minimalnog
				if (_teme.getElement2(i).PrebrojiBrojPoglavalja() < min_polgavlja) {
					return nullptr;
				}

				// USLI SMO U SVA POGLAVLJA NEKOG ZAVRSNOG RADA
				for (int j = 0; j < _teme.getElement2(i).GetPoglavlja().size(); j++)
				{
			 
					// 3. svako poglavlje je prihvaceno / odobreno
					if (_teme.getElement2(i).GetPoglavlja()[j].GetPrihvaceno() == false) {
						return nullptr;
					}

					// _teme.getElement2(i).poglavljaRada[j]
					// 2. svako poglavlje ima broj karaktera veci od minimalnog

					if (_teme.getElement2(i).GetPoglavlja()[j].PrebrojiBrojSlovaUSadrzaju() < min_karaktera_po_poglavlju) {
						return nullptr;
					}

				}



				_teme.getElement2(i).SetDatumOdbrane(datum);

				float prosjek = _teme.getElement2(i).prosjecnaOcjena();

				_teme.getElement2(i).SetKonacnaOcjena(prosjek);

				ZavrsniRad* zavrsni = new ZavrsniRad(_teme.getElement2(i));

				return zavrsni;
			}


		}



		return nullptr;
	}

};

int main()
{
	cout << crt << "UPLOAD RADA OBAVEZNO IZVRSITI U ODGOVARAJUCI FOLDER NA FTP SERVERU" << endl;
	cout << "U slucaju da je Upload folder prazan pritisnite tipku F5" << crt;


	//Kolekcija<int, int> kolekcija;

	//kolekcija.Add(0, 0);
	//kolekcija.Add(1, 1);
	//kolekcija.Add(2, 2);
	//kolekcija.Add(3, 3);

	//cout << kolekcija;





		const int max = 4;
		Mentor* mentori[max];
	
		mentori[0] = new Mentor("Armina Hubana");
		mentori[1] = new Mentor("Zanin Vejzovic");
		mentori[2] = new Mentor("Jasmin Azemovic");
		mentori[3] = new Mentor("Emina Junuz");
		// parametri: naziv zavrsnog rada
	ZavrsniRad multimedijalni("Multimedijalni informacijski sistem za visoko - obrazovnu ustanovu");
	ZavrsniRad podrsa_operaterima("Sistem za podršku rada kablovskog operatera");
	ZavrsniRad analiza_sigurnosti("Prakticna analiza sigurnosti beži?nih ra?unarskih mreža");
	ZavrsniRad kriptografija("Primjena teorije informacija u procesu generisanja kriptografskih klju?eva");



	/*u zavrsni rad dodaje novo poglavlje i njegov sadrzaj. ukoliko poglavlje vec postoji u zavrsnom radu, funkcija tom poglavlju treba dodati novi sadrzaj i pri tome zadrzi
	postojeci (izmedju postojeceg i novog sadrzaja se dodaje prazan prostor). u slucaju da poglavlje ne postoji, ono se dodaje zajedno sa sadrzaje*/
	// parametri: nazivPoglavlja, sadrzajPoglavlja
	multimedijalni.DodajPoglavlje("Uvod", "U ovom poglavlju ce biti rijeci");
	multimedijalni.DodajPoglavlje("Uvod", "o multimedijalnim sistemima koji se danas koriste");
	multimedijalni.DodajPoglavlje("Uvod", "u savremenom poslovanju");
	multimedijalni.DodajPoglavlje("Vrste multimedijalnih sistema", "Danas se moze govoriti o nekoliko vrsta multimedijalnih sistema, a neke od najznacajnijih su ...");
	multimedijalni.DodajPoglavlje("Teorija multimedije", "Sadrzaj koji bi trebao stajati na pocetku treceg poglavlja zavrsnog rada o multimediji studenta IB130011");
	multimedijalni.DodajPoglavlje("Zakljucak", "U ovom radu su predstavljeni osnovni koncepti i prakticna primjena...");


	try
	{
		/*funkcija OcijeniPoglavlje, na osnovu naziva poglavlja, dodjeljuje ocjenu poglavlju te ukoliko je ocjena pozitivna (6 - 10) onda poglavlje oznacava prihvacenim.
		U slucaju da ocjena nije validna ili poglavlje ne postoji, funkcija baca izuzetak sa odgovarajucom porukom*/
		// parametri:nazivPoglavlja, ocjena

		multimedijalni.OcijeniPoglavlje("Uvod", 8);
		multimedijalni.OcijeniPoglavlje("Vrste multimedijalnih sistema", 8);
		multimedijalni.OcijeniPoglavlje("Teorija multimedije", 9);
		multimedijalni.OcijeniPoglavlje("Zakljucak", 7);
		multimedijalni.OcijeniPoglavlje("Naziv poglavlja ne postoji", 8);
	}
	catch (exception& err)
	{
		cout << "Greska -> " << err.what() << endl;
	}



	cout << multimedijalni;
	//
		/*funkcija DodajZavrsniRad ima zadatak da odredjenom Mentoru dodijeli mentorstvo na zavrsnom radu. zavrsni rad se dodaje studentu sa brojem indeksa proslijedjenim kao
		prvi parametar. sprijeciti dodavanje zavrsnih radova sa istom temom*/
		// parametri:brojIndeksa, zavrsniRad
		if (mentori[0]->DodajZavrsniRad("IB130011", multimedijalni))
			cout << "Zavrsni rad uspjesno dodat!" << endl;
		if (mentori[0]->DodajZavrsniRad("IB120051", podrsa_operaterima))
			cout << "Zavrsni rad uspjesno dodat!" << endl;
		if (!mentori[0]->DodajZavrsniRad("IB120056", podrsa_operaterima)) // dupliranje rada
			cout << "Zavrsni rad nije dodat!" << endl;
		if (!mentori[0]->DodajZavrsniRad("IB120051", kriptografija)) // studentu vec dodijeljen rad
			cout << "Zavrsni rad nije dodat!" << endl;
		if (mentori[1]->DodajZavrsniRad("IB140102", analiza_sigurnosti))
			cout << "Zavrsni rad uspjesno dodat!" << endl;
		if (mentori[2]->DodajZavrsniRad("IB140002", kriptografija))
			cout << "Zavrsni rad uspjesno dodat!" << endl;




	
	//	/*funkcija ZakaziOdbranuRada ima zadatak da studentu sa proslijedjenim brojem indeksa zakaze odbranu zavrsnog rada sto podrazumijeva definisanje
	//datuma odbrane. odbrana rada se moze zakazati samo studentu koji je rad prethodno prijavio i pri tom su zadovoljeni sljedeci uslovi:
	//	1. zavrsni rad ima broj poglavlja veci od minimalnog
	//	2. svako poglavlje ima broj karaktera veci od minimalnog
	//	3. svako poglavlje je prihvaceno/odobreno
	//ukoliko su zadovoljeni prethodni kriteriji, izracunava se konacna ocjena rada (prosjek ocjena svih poglavlja), postavlja datum odbrane rada i vraca pokazivac na rad kome je zakazan odbrana.
	//u slucaju da student sa primljenim brojem indeksa nije prijavio zavrsni rad ili neki od postavljenih kriterija nije zadovoljen, funkcija vraca nullptr.
	//*/
	//
	////parametri:brojIndeksa, datumOdbrane
		ZavrsniRad* zr1 = mentori[0]->ZakaziOdbranuRada("IB130011", "25.09.2018");
		if (zr1 != nullptr)
			cout << *zr1 << endl;
	
		zr1 = mentori[0]->ZakaziOdbranuRada("IB130111", "25.09.2018");//student sa brojem indeksa IB130111 jos uvijek nije prijavio rad
		if (zr1 != nullptr)
			cout << *zr1 << endl;
	//
	//	//ispisuje sve podatke o Mentoru i njegovim mentorstvima
		mentori[0]->Info();
	
	
		for (int i = 0; i < max; i++)
		{
			delete mentori[i];
			mentori[i] = nullptr;
		}



	system("pause>0");
	return 0;
}

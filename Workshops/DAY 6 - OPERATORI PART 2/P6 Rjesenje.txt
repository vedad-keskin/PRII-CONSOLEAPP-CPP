#include<iostream>
using namespace std;

char* GetNizKaraktera(const char* tekst) {
	if (tekst == nullptr)
		return nullptr;
	int vel = strlen(tekst) + 1;
	char* novi = new char[vel];
	strcpy_s(novi, vel, tekst);
	return novi;
}

class Datum
{
	int* _dan, * _mjesec, * _godina;
public:
	Datum(int dan = 1, int mjesec = 1, int godina = 2000) {
		_dan = new int(dan);
		_mjesec = new int(mjesec);
		_godina = new int(godina);
	}


	Datum(const Datum& obj) {
		_dan = new int(*obj._dan);
		_mjesec = new int(*obj._mjesec);
		_godina = new int(*obj._godina);
	}

	// operator =

	Datum& operator = (const Datum& obj) {
		if (this != &obj) {
			delete _dan;
			delete _mjesec;
			delete _godina;


			_dan = new int(*obj._dan);
			_mjesec = new int(*obj._mjesec);
			_godina = new int(*obj._godina);
		}
		return *this;
	}



	// operator ==

	bool operator == (const Datum& obj) {
		return *_dan == *obj._dan && *_mjesec == *obj._mjesec && *_godina == *obj._godina;
	}


	~Datum() {
		delete _dan; _dan = nullptr;
		delete _mjesec; _mjesec = nullptr;
		delete _godina; _godina = nullptr;
	}

	// operator <<

	friend ostream& operator<< (ostream& COUT, const Datum& obj) {
		COUT << *obj._dan << "." << *obj._mjesec << "." << *obj._godina;
		return COUT;
	}
};


class Fudbaler
{
	char* _imePrezime; 
	char* _pozicija;
	int _brojDresa;
	Datum *_datumRodjenja;
public:
	//Potrebne konstruktor i destruktor funkcije

	// operator =
	
	Fudbaler(const char* imeprezime = "--- ---", const char* pozicija = "---",
		int dres = 0, Datum datum = Datum()) {
		_imePrezime = GetNizKaraktera(imeprezime);
		_pozicija = GetNizKaraktera(pozicija);
		_brojDresa = dres;
		_datumRodjenja = new Datum(datum);
	}

	Fudbaler(const Fudbaler& obj) {
		_imePrezime = GetNizKaraktera(obj._imePrezime);
		_pozicija = GetNizKaraktera(obj._pozicija);
		_brojDresa = obj._brojDresa;
		_datumRodjenja = new Datum(*obj._datumRodjenja);

	}

	// operator =

	Fudbaler& operator = (const Fudbaler& obj) {
		if (this != &obj) {
			delete _imePrezime;
			delete _pozicija;
			delete _datumRodjenja;

			_imePrezime = GetNizKaraktera(obj._imePrezime);
			_pozicija = GetNizKaraktera(obj._pozicija);
			_brojDresa = obj._brojDresa;
			_datumRodjenja = new Datum(*obj._datumRodjenja);

		}
		return *this;
	}

	~Fudbaler() {
		delete _imePrezime;
		_imePrezime = nullptr;
		delete _pozicija;
		_pozicija = nullptr;
		delete _datumRodjenja;
		_datumRodjenja = nullptr;
	}

	//operator ==

	bool operator == (const Fudbaler& obj) {
		return strcmp(_imePrezime,obj._imePrezime) == 0;
	}

	// operator += mijenja broj dresa

	Fudbaler& operator += (int brojdresa) {
		_brojDresa = brojdresa;
		return *this;
	}

	
	// operator <<

	friend ostream& operator << (ostream& COUT, const Fudbaler& obj) {
		COUT << "[" << obj._pozicija <<"] - " <<obj._imePrezime <<" ["<<obj._brojDresa<<"] - rodjen "<<*obj._datumRodjenja << endl;
		return COUT;
	}

};
class Tim {
	//Oznaka prostorije
	char* _naziv;
	Fudbaler *_momcad;
	int *_trenutno;
	int _max;

public:
	
	//Potrebne konstruktor i destruktor funkcije

	Tim(const char * naziv = "---", int max = 11) {
		_naziv = GetNizKaraktera(naziv);
		_trenutno = new int(0);
		_max = max;
		_momcad = new Fudbaler[_max];
	}

	Tim(const Tim& obj) {
		_naziv = GetNizKaraktera(obj._naziv);
		_trenutno = new int(*obj._trenutno);
		_max = obj._max;
		_momcad = new Fudbaler[_max];

		for (int i = 0; i < *_trenutno; i++)
		{
			_momcad[i] = obj._momcad[i];
		}
	}

	// operator =

	Tim& operator = (const Tim& obj) {
		if (this != &obj) {
			delete[] _momcad;
			delete _trenutno;


			_naziv = GetNizKaraktera(obj._naziv);
			_trenutno = new int(*obj._trenutno);
			_max = obj._max;
			_momcad = new Fudbaler[_max];

			for (int i = 0; i < *_trenutno; i++)
			{
				_momcad[i] = obj._momcad[i];
			}
		}
		return *this;
	}

	~Tim() {
		delete[] _momcad;
		_momcad = nullptr;
		delete _trenutno;
		_trenutno = nullptr;
	}

	// operator ==

	bool operator == (const Tim& obj) {
		return strcmp(_naziv,obj._naziv) == 0;
	}


	// operator ( )  za dodavanje igraca u tim

	Tim& operator() (Fudbaler fudbaler) {

		if (*_trenutno == _max) {
			return *this;
		}

		for (int i = 0; i < *_trenutno; i++)
		{
			if (fudbaler == _momcad[i]) {
				return *this;
			}
		}


		_momcad[*_trenutno] = fudbaler;
		(*_trenutno)++;

	}


	const char* GetNazivTima() {
		return _naziv;
	}
	
	// operator <<

	friend ostream& operator << (ostream& COUT, const Tim& obj) {
		COUT << "====== " << obj._naziv <<" ======" << endl;
		COUT << "====== MOMCAD =======" << endl;
		for (int i = 0; i < *obj._trenutno; i++)
		{
			COUT << obj._momcad[i];
		}
		return COUT;
	}

};


class Liga
{
public:
	char* _naziv;
	Tim* _timovi;
	int* _trenutno;
	int _max;


	Liga(const char* naziv = "---", int max = 11) {
		_naziv = GetNizKaraktera(naziv);
		_trenutno = new int(0);
		_max = max;
		_timovi = new Tim[_max];

		
	}

	Liga(const Liga& obj) {
		_naziv = GetNizKaraktera(obj._naziv);
		_trenutno = new int(*obj._trenutno);
		_max = obj._max;
		_timovi = new Tim[_max];

		for (int i = 0; i < *_trenutno; i++)
		{
			_timovi[i] = obj._timovi[i];
		}
	}

	// operator =

	Liga& operator = (const Liga& obj) {
		if (this != &obj) {
			delete[] _timovi;
			delete _trenutno;


			_naziv = GetNizKaraktera(obj._naziv);
			_trenutno = new int(*obj._trenutno);
			_max = obj._max;
			_timovi = new Tim[_max];

			for (int i = 0; i < *_trenutno; i++)
			{
				_timovi[i] = obj._timovi[i];
			}
		}
		return *this;
	}

	~Liga() {
		delete[] _timovi;
		_timovi = nullptr;
		delete _trenutno;
		_trenutno = nullptr;
	}

	// operator ==

	bool operator == (const Liga& obj) {
		return strcmp(_naziv, obj._naziv) == 0;
	}

	// operator ( ) za dodavanje timova u ligu

	Liga& operator() (Tim tim) {

		if (*_trenutno == _max) {
			return *this;
		}

		for (int i = 0; i < *_trenutno; i++)
		{
			if (tim == _timovi[i]) {
				return *this;
			}
		}


		_timovi[*_trenutno] = tim;
		(*_trenutno)++;

	}

	// operator [ ] koji prolanazi tim koji proslijedimo kao naziv tima ili kao Tim

	bool operator [](const char* nazivTima) {

		for (int i = 0; i < *_trenutno; i++)
		{
			if (strcmp(nazivTima,_timovi[i].GetNazivTima()) == 0) {
				return true;
			}
		}
		return false;
	}

	bool operator [](Tim tim) {

		for (int i = 0; i < *_trenutno; i++)
		{
			if (tim == _timovi[i]) {
				return true;
			}
		}
		return false;
	}


	friend ostream& operator << (ostream& COUT, const Liga& obj) {
		COUT << "====== " << obj._naziv<<" ======" << endl;
		COUT << "===== TIMOVI ======" << endl<<endl;
		for (int i = 0; i < *obj._trenutno; i++)
		{
			COUT << obj._timovi[i]<<endl;
		}
		return COUT;
	}

};



void main()
{

	Datum datum1(12, 12, 1998);
	Datum datum2(1, 15, 1995);


	Fudbaler fudbaler1("Oliver Kahn", "GK", 1, datum2);
	Fudbaler fudbaler2("Philipp Lahm", "LB", 21, datum1);
	Fudbaler fudbaler3("Franck Ribery", "LMF", 7, datum2);
	Fudbaler fudbaler4("Arjen Robben", "RMF", 10, datum2);
	Fudbaler fudbaler5("Luca Toni", "CF", 9, datum1);
	Fudbaler fudbaler6("Victor Valdez", "GK", 1, datum1);
	Fudbaler fudbaler7("Charles Puyol", "CB", 5, datum1);
	Fudbaler fudbaler8("Andres Iniesta", "CMF", 8, datum1);
	Fudbaler fudbaler9("Ronaldinho", "SS", 10, datum1);
	Fudbaler fudbaler10("David Villa", "CF", 9, datum1);

	// fudbaler1 += (17);

	//cout << fudbaler1;

	Tim tim1("Bayern Munchen", 11);

	tim1(fudbaler1);
	tim1(fudbaler2);
	tim1(fudbaler3);
	tim1(fudbaler4);
	tim1(fudbaler5);

	Tim tim2("Barcelona", 11);
	tim2(fudbaler6);
	tim2(fudbaler7);
	tim2(fudbaler8);
	tim2(fudbaler9);
	tim2(fudbaler10);

	
	Liga liga("Liga Sampiona", 11);

	liga(tim1);
	liga(tim2);

	cout << liga;

	Tim tim3("Real Madrid", 11);

	if (liga["Real Madrid"]) {
		cout << "Tim se nalazi u ligi" << endl;
	}
	else {
		cout << "Tim se ne nalazi u ligi" << endl;

	}

	if (liga[tim2]) {
		cout << "Tim se nalazi u ligi" << endl;
	}
	else {
		cout << "Tim se ne nalazi u ligi" << endl;

	}
	


	system("pause>0");
}

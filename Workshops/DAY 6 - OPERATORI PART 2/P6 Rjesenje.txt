#include<iostream>
using namespace std;

char* GetNizKaraktera(const char* tekst) {
	if (tekst == nullptr)
		return nullptr;
	int vel = strlen(tekst) + 1;
	char* novi = new char[vel];
	strcpy_s(novi, vel, tekst);
	return novi;
}

class Predmet
{
	char* _naziv;
	int _godinaStudija;
public:
	//Potrebne konstruktor i destruktor funkcije
	Predmet(const char * naziv = "---",int godina = 1) {
		_naziv = GetNizKaraktera(naziv);
		_godinaStudija = godina;
	}
	Predmet(const Predmet& obj) {
		_naziv = GetNizKaraktera(obj._naziv);
		_godinaStudija = obj._godinaStudija;
	}
	Predmet& operator = (const Predmet& obj) {
		if (this != &obj) {
			delete[]_naziv;
			_naziv = GetNizKaraktera(obj._naziv);
			_godinaStudija = obj._godinaStudija;
		}
		return *this;
	}

	friend ostream& operator << (ostream& COUT, const Predmet& obj) {
		COUT << obj._naziv << " - " << obj._godinaStudija;
		return COUT;
	}

	~Predmet() {
		delete[]_naziv;
		_naziv = nullptr;
	}

	bool operator == (const Predmet& obj) {
		return strcmp(_naziv,obj._naziv) == 0;
	}

	// operator =
	// operator ==
	//operator <<
};
ostream& operator << (ostream& COUT, const Predmet& obj);

class Prisustvo
{
public:
	char* _student; //ne smije sadržavati brojeve
	char* _brojIndeksa;
	int _brojSati;
public:
	//Potrebne konstruktor i destruktor funkcije
	Prisustvo(const char* student = "---", const char * index = "---", int sati = 0) {
		_student = GetNizKaraktera(student);
		_brojIndeksa = GetNizKaraktera(index);
		_brojSati = sati;
	}
	Prisustvo(const Prisustvo& obj) {
		_student = GetNizKaraktera(obj._student);
		_brojIndeksa = GetNizKaraktera(obj._brojIndeksa);
		_brojSati = obj._brojSati;
	}
	Prisustvo& operator = (const Prisustvo& obj) {
		if (this != &obj) {
			delete[]_student;
			delete[]_brojIndeksa;
			_student = GetNizKaraktera(obj._student);
			_brojIndeksa = GetNizKaraktera(obj._brojIndeksa);
			_brojSati = obj._brojSati;
		}
		return *this;
	}

	friend ostream& operator << (ostream& COUT, const Prisustvo& obj) {
		COUT <<"Student : " << obj._student << " - " << obj._brojIndeksa << endl;
		return COUT;
	}
	~Prisustvo() {
		delete[]_student;
		_student = nullptr;
		delete[]_brojIndeksa;
		_brojIndeksa = nullptr;
	}

	bool operator == (const Prisustvo& obj) {
		return strcmp(_brojIndeksa, obj._brojIndeksa) == 0;
	}

	bool operator == (const char * brojindeksa) {
		return strcmp(_brojIndeksa, brojindeksa) == 0;
	}

	// operator =
	//operator ==
	// operator <<
};
class Nastava {
	//Oznaka prostorije
	char* _prostorija;
	char* _datum;
	char* _satnica;
	char* _predavac;
	//P, V ili W
	Predmet* _predmet;
	char _tipNastave;
	int* _odrzanoSati;
	Prisustvo _prisutni[50];
public:
	int _trenutnoPrisutnih;
	//Potrebne konstruktor i destruktor funkcije
	Nastava(const char * prostorija, const char * datum,const char * satnica, const char * predavac,Predmet predmet, char tip, int sat) {
		_prostorija = GetNizKaraktera(prostorija);
		_datum = GetNizKaraktera(datum);
		_satnica = GetNizKaraktera(satnica);
		_predavac = GetNizKaraktera(predavac);
		_predmet = new Predmet(predmet);
		_tipNastave = tip;
		_odrzanoSati = new int(sat);
		_trenutnoPrisutnih = 0;
	}
	// operator <<
	friend ostream& operator << (ostream& COUT, const Nastava& obj) {
		COUT << "Prostorija : " << obj._prostorija << endl;
		COUT << "Datum : " << obj._datum << endl;
		COUT << "Satnica : " << obj._satnica << endl;
		COUT << "Predavac : " << obj._predavac << endl;
		COUT << "Predmet : " << *obj._predmet << endl;
		COUT << "Tip nastave : " << obj._tipNastave << endl;
		COUT << "Odrzano sati : " << *obj._odrzanoSati << endl;
		COUT << "===========PRISUTNI===========" << endl;
		for (int i = 0; i < obj._trenutnoPrisutnih; i++)
		{
			COUT << obj._prisutni[i];
		}
		return COUT;
	}
	~Nastava() {
		delete[]_prostorija;
		_prostorija = nullptr;
		delete[]_datum;
		_datum = nullptr;
		delete[]_satnica;
		_satnica = nullptr;
		delete[]_predavac;
		_predavac = nullptr;
		delete _predmet;
		_predmet = nullptr;
		delete _odrzanoSati;
		_odrzanoSati = nullptr;
	}

	//Preklopljeni operator+= za dodavanje objekata tipa Prisustvo u niz _prisutni
	//Onemogućiti dodavanje istog prisustva 
	bool operator += (const Prisustvo& novi) {
		if (_trenutnoPrisutnih == 50) {
			return false;
		}
		for (int i = 0; i < _trenutnoPrisutnih; i++)
		{
			if (strcmp(_prisutni[i]._brojIndeksa,novi._brojIndeksa) == 0){
				cout << "Ne moze se unijeti isti student" << endl;
				return false;
			}
		}

		_prisutni[_trenutnoPrisutnih] = novi;
		_trenutnoPrisutnih++;
		return true;
	}



	//Preklopljeni operator-= za uklanjanje objekata tipa Prisustvo iz niza _prisutni

	bool operator -= (const Prisustvo& stari) {

		for (int i = 0; i < _trenutnoPrisutnih; i++)
		{
			if (_prisutni[i] == stari) {
				for (int j = i; j < _trenutnoPrisutnih-1; j++)
				{
					_prisutni[j] = _prisutni[j + 1];
				}
				_trenutnoPrisutnih--;
				return true;
			}
		}
		return false;
	}

	//Preklopljeni operator [] koji na osnovu parametra broj indeksa  provjerava da li je 
	//odreðeni student prisustvovao nastavi
	bool operator [](const char brIndeksa[]) {
		for (int i = 0; i < _trenutnoPrisutnih; i++)
		{
			if (_prisutni[i] == brIndeksa) {
				return true;
			}
		}
		return false;
	}

};
void main()
{


	Prisustvo p1("Test Test", "IB111", 2);
	Prisustvo p2("Niko Nikic", "IB222", 4);
	Prisustvo p3("Miro Miric", "IB333", 6);


	Predmet predmet("Programiranje 3", 2);

	

	Nastava n("AMF1", "15.02.2019", "14:00-17:00", "Denis Music", predmet, 'P', 3);

	
	n += p1;
	n += p2;
	n += p1;
	n += p3;



	n -= p3;

	

	

	bool daLiJePrisustvovao = n["IB444"];
	if (daLiJePrisustvovao)
		cout << "IB4444 je prisustvovao nastavi\n";
	else
		cout << "IB4444 nije prisustvovao nastavi\n";

	cout << n << endl;

	system("pause>0");
}

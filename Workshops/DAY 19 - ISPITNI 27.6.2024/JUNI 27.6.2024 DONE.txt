#include <iostream>
#include <vector>
#include <string>
#include <regex>
#include <mutex>
#include <thread>
#include <fstream>
#include <memory>
using namespace std;

const char* PORUKA = "\n-------------------------------------------------------------------------------\n"
"0. PROVJERITE DA LI PREUZETI ZADACI PRIPADAJU VASOJ GRUPI (G1/G2)\n"
"1. SVE KLASE TREBAJU POSJEDOVATI ADEKVATAN DESTRUKTOR\n"
"2. NAMJERNO IZOSTAVLJANJE KOMPLETNIH I/ILI POJEDINIH DIJELOVA DESTRUKTORA CE BITI OZNACENO KAO TM\n"
"3. SPASAVAJTE PROJEKAT KAKO BI SE SPRIJECILO GUBLJENJE URADJENOG ZADATKA\n"
"4. ATRIBUTI, NAZIVI FUNKCIJA, TE BROJ I TIP PARAMETARA MORAJU BITI IDENTICNI ONIMA KOJI SU KORISTENI U TESTNOM CODE-U, "
"OSIM U SLUCAJU DA POSTOJI ADEKVATAN RAZLOG ZA NJIHOVU MODIFIKACIJU. OSTALE "
"POMOCNE FUNKCIJE MOZETE IMENOVATI I DODAVATI PO ZELJI.\n"
"5. IZUZETAK BACITE SAMO U FUNKCIJAMA U KOJIMA JE TO NAZNACENO.\n"
"6. METODE I KLASE KOJE NE IMPLEMENTIRATE NEMOJTE BRISATI (BEZ OBZIRA STO NEMAJU IMPLEMENTACIJU)!\n"
"7. NA KRAJU ISPITA SVOJE RJESENJE KOPIRATE U .DOCX FAJL (IMENOVAN BROJEM INDEKSA)!\n"
"8. RJESENJA ZADATKA POSTAVITE NA FTP SERVER U ODGOVARAJUCI FOLDER!\n"
"9. NEMOJTE POSTAVLJATI VISUAL STUDIO PROJEKTE, VEC SAMO .DOCX FAJL SA VASIM RJESENJEM!\n"
"10.SVE NEDOZVOLJENE RADNJE TOKOM ISPITA CE BITI SANKCIONISANE!\n"
"11. ZA POTREBE TESTIRANJA, U MAINU, BUDITE SLOBODNI DODATI TESTNIH PODATAKA (POZIVA FUNKCIJA) KOLIKO GOD SMATRATE DA JE POTREBNO!\n"
"12. ZA IZRADU ISPITNOG RJESENJA KORISTITI VISUAL STUDIO 2022!\n"
"-------------------------------------------------------------------------------\n";

const char* crt = "\n-------------------------------------------\n";
enum Karakteristike { NARUDZBA, KVALITET, PAKOVANJE, ISPORUKA };

ostream& operator<< (ostream& COUT, const Karakteristike& obj) {

	const char* KopijaKarakteristika[]{ "NARUDZBA","KVALITET","PAKOVANJE","ISPORUKA" };

	COUT << KopijaKarakteristika[obj];
	return COUT;
}

char* GetNizKaraktera(const char* sadrzaj, bool dealociraj = false) {
	if (sadrzaj == nullptr)return nullptr;
	int vel = strlen(sadrzaj) + 1;
	char* temp = new char[vel];
	strcpy_s(temp, vel, sadrzaj);
	if (dealociraj)
		delete[]sadrzaj;
	return temp;
}

template<class T1, class T2>
class Kolekcija {
	T1* _elementi1[50]; // isto kao zadaci s maxom
	T2* _elementi2[50];
	int* _trenutno;
	bool _omoguciDupliranje;
public:
	Kolekcija(bool omoguciDupliranje = true) {
		_omoguciDupliranje = omoguciDupliranje;
		_trenutno = new int(0);
	}

	Kolekcija(const Kolekcija& obj) {
		_trenutno = new int(*obj._trenutno);
		_omoguciDupliranje = obj._omoguciDupliranje;


		for (int i = 0; i < *_trenutno; i++)
		{
			_elementi1[i] = new T1(*obj._elementi1[i]);
			_elementi2[i] = new T2(*obj._elementi2[i]);
		}

	}

	Kolekcija& operator = (const Kolekcija& obj) {
		if (this != &obj) {

			for (int i = 0; i < *_trenutno; i++)
			{
				delete _elementi1[i];
				delete _elementi2[i];
			}
			delete _trenutno;

			_trenutno = new int(*obj._trenutno);
			_omoguciDupliranje = obj._omoguciDupliranje;


			for (int i = 0; i < *_trenutno; i++)
			{
				_elementi1[i] = new T1(*obj._elementi1[i]);
				_elementi2[i] = new T2(*obj._elementi2[i]);
			}
		}
		return *this;
	}

	void AddElement(T1 el1, T2 el2) {
		if (50 == *_trenutno) {
			throw exception("Niz je popunjen");
		}


		if (_omoguciDupliranje == false) {
			for (int i = 0; i < *_trenutno; i++)
			{
				if (el1 == *_elementi1[i] || el2 == *_elementi2[i]) {
					throw exception("Dupliranje nije dozvoljeno");
				}

			}
		}


		_elementi1[*_trenutno] = new T1(el1);
		_elementi2[*_trenutno] = new T2(el2);
		(*_trenutno)++;
	}



	Kolekcija<int, int> operator () (int pocetak, int kraj, bool okreni = false) {

		Kolekcija<int, int> novakolekcija;  // prazna kolekcija koja u sebi nema nista

		if (okreni == false) { // ako ne trazi okretanje

			for (int i = pocetak; i <= kraj; i++)
			{
				novakolekcija.AddElement(*_elementi1[i], *_elementi2[i]);
			}

		}
		else { // ako trazi okretanje

			for (int i = kraj; i >= pocetak; i--)
			{
				novakolekcija.AddElement(*_elementi1[i], *_elementi2[i]);
			}

		}


		return novakolekcija;

	}


	~Kolekcija() {
		for (int i = 0; i < *_trenutno; i++) {
			delete _elementi1[i]; _elementi1[i] = nullptr;
			delete _elementi2[i]; _elementi2[i] = nullptr;
		}
		delete _trenutno; _trenutno = nullptr;
	}

	T1& getElement1(int lokacija)const { return *_elementi1[lokacija]; }
	T2& getElement2(int lokacija)const { return *_elementi2[lokacija]; }
	int getTrenutno() const { return *_trenutno; }

	friend ostream& operator<< (ostream& COUT, const Kolekcija& obj) {
		for (size_t i = 0; i < *obj._trenutno; i++)
			COUT << obj.getElement1(i) << " " << obj.getElement2(i) << endl;
		return COUT;
	}
};
class Datum {
	int* _dan, * _mjesec, * _godina;
public:
	Datum(int dan = 1, int mjesec = 1, int godina = 2000) {
		_dan = new int(dan);
		_mjesec = new int(mjesec);
		_godina = new int(godina);
	}

	Datum(const Datum& obj) { // <----  kada nema & napravi se kopija datum u memoriji

		_dan = new int(*obj._dan);
		_mjesec = new int(*obj._mjesec);
		_godina = new int(*obj._godina);

	}

	Datum& operator = (const Datum& obj) {
		if (this != &obj) {
			delete _dan;
			delete _mjesec;
			delete _godina;


			_dan = new int(*obj._dan);
			_mjesec = new int(*obj._mjesec);
			_godina = new int(*obj._godina);
		}
		return *this;
	}


	bool operator == (const Datum obj) {
		return *_dan == *obj._dan && *_mjesec == *obj._mjesec && *_godina == *obj._godina;
	}


	int SumaDana() {
		return *_dan + *_mjesec * 30 + *_godina * 365;
	}


	~Datum() {
		delete _dan; _dan = nullptr;
		delete _mjesec; _mjesec = nullptr;
		delete _godina; _godina = nullptr;
	}
	friend ostream& operator<< (ostream& COUT, const Datum& obj) {
		COUT << *obj._dan << "." << *obj._mjesec << "." << *obj._godina;
		return COUT;
	}
};

class ZadovoljstvoPotrosaca {
	int _ocjena; //za svaku kupovinu kupac moze ostaviti jednu ocjenu
	//uz ocjenu, kupci mogu komentarisati svaku od karakteristika proizvoda.
	//onemoguciti dupliranje karakteristika tj. svaka karakteristika se moze komentarisati samo jednom...u suprotnom baciti objekat tipa exception
	Kolekcija<Karakteristike*, const char*>* _komentariKarakteristika;
public:
	ZadovoljstvoPotrosaca(int ocjena = 0) {
		_ocjena = ocjena;
		_komentariKarakteristika = new Kolekcija<Karakteristike*, const char*>(false);
	}

	ZadovoljstvoPotrosaca(const ZadovoljstvoPotrosaca& obj) {
		_ocjena = obj._ocjena;

		_komentariKarakteristika = new Kolekcija<Karakteristike*, const char*>(*obj._komentariKarakteristika);

	}

	ZadovoljstvoPotrosaca& operator = (const ZadovoljstvoPotrosaca& obj) {
		if (this != &obj) {

			delete _komentariKarakteristika;


			_ocjena = obj._ocjena;
			_komentariKarakteristika = new Kolekcija<Karakteristike*, const char*>(*obj._komentariKarakteristika);

		}
		return *this;
	}
	bool operator == (const ZadovoljstvoPotrosaca obj) {
		return _ocjena == obj._ocjena;
	}

	//                                                  KVALITET
	void DodajKomentarKarakteristike(Karakteristike karakteristika, const char* komentar) {
		for (int i = 0; i < _komentariKarakteristika->getTrenutno(); i++)
		{
			if (karakteristika == *_komentariKarakteristika->getElement1(i)) {
				throw exception("Karakteristika je vec ocjenjena");
			}
		}

		_komentariKarakteristika->AddElement(new Karakteristike(karakteristika), komentar);
	}



	int GetOcjena() { return _ocjena; }
	Kolekcija<Karakteristike*, const char*>& GetKomentareKarakteristika() { return *_komentariKarakteristika; }

	~ZadovoljstvoPotrosaca() {
		delete _komentariKarakteristika; _komentariKarakteristika = nullptr;
	}

	friend ostream& operator<< (ostream& COUT, const ZadovoljstvoPotrosaca& obj) {
		COUT << obj._ocjena << endl;
		for (int i = 0; i < obj._komentariKarakteristika->getTrenutno(); i++)
		{

			COUT << "\t" << *obj._komentariKarakteristika->getElement1(i) << " - " << obj._komentariKarakteristika->getElement2(i) << endl;
		}
		return COUT;
	}



};

class Osoba {
protected:
	char* _imePrezime;
	Datum _datumRodjenja;
public:
	Osoba(const char* imePrezime = "", Datum datumRodjenja = Datum()) {
		_imePrezime = GetNizKaraktera(imePrezime);
		_datumRodjenja = datumRodjenja;
	}

	Osoba(const Osoba& obj) {
		_imePrezime = GetNizKaraktera(obj._imePrezime);
		_datumRodjenja = obj._datumRodjenja;
	}
	Osoba& operator = (const Osoba& obj) {
		if (this != &obj) {
			delete[]_imePrezime;


			_imePrezime = GetNizKaraktera(obj._imePrezime);
			_datumRodjenja = obj._datumRodjenja;
		}
		return *this;
	}



	virtual ~Osoba() {
		delete[] _imePrezime; _imePrezime = nullptr;
	}
	char* GetImePrezime() { return _imePrezime; }
	Datum& GetDatumRodjenja() { return _datumRodjenja; }

	virtual void Info() = 0;
	friend ostream& operator<< (ostream& COUT, const Osoba& obj) {
		COUT << obj._imePrezime << " " << obj._datumRodjenja << endl;
		return COUT;
	}
};

mutex m;
class Potrosac : public Osoba {
	char* _emailAdresa;
	//float se odnosi na iznos racuna za odredjenu kupovinu
	Kolekcija<float, ZadovoljstvoPotrosaca> _kupovine;
	vector<int> _bodovi; // bodovi sakupljeni tokom kupovine, svakih potrosenih 10KM donosi po 1 bod.
public:
	Potrosac(const char* imePrezime = "", Datum datumRodjenja = Datum(), const char* emailAdresa = "")
		:_kupovine(false), Osoba(imePrezime, datumRodjenja) {

		_emailAdresa = GetNizKaraktera(emailAdresa);

	}

	Potrosac(const Potrosac& obj) :Osoba(obj) { // 3. KORAK SPOJITI COPY KUPCA SA COPY OSOBE
		_emailAdresa = GetNizKaraktera(obj._emailAdresa);
		_kupovine = obj._kupovine;
		_bodovi = obj._bodovi;
	}

	Potrosac& operator = (const Potrosac& obj) {
		if (this != &obj) {

			delete[]_emailAdresa;


			Osoba::operator=(obj);  // 4. KORAK SPOJITI OPERAOTR KUPCA SA OPERAOTORM OSOBE

			_emailAdresa = GetNizKaraktera(obj._emailAdresa);
			_kupovine = obj._kupovine;
			_bodovi = obj._bodovi;
		}
		return *this;
	}

	void Info() { // 5. KORAK SPOJITI INFO KUPCA SA INFO OSOBE
		cout << *this;
	}

	void DodajKupovinu(float IznosRacuna, ZadovoljstvoPotrosaca zadovoljstvo) {

		_kupovine.AddElement(IznosRacuna, zadovoljstvo);

		if (IznosRacuna > 9) {
			int bod = IznosRacuna / 10;


			_bodovi.push_back(bod);


			if (bod > 5) {

				this_thread::sleep_for(chrono::seconds(3));
				thread t1(&Potrosac::PosaljiMail, this, bod);
				t1.join();

			}

		}

	}

	//  To: denis@fit.ba;
	//  Subject: Osvareni bodovi

	//  Postovani,

	//  Prilikom posljednje kupovine ste ostvarili 8 bodova, tako da trenutno vas ukupan broj bodova iznosi 20.

	//  Zahvaljujemo vam na kupovini.
	//  Puno pozdrava

	void PosaljiMail(int bodovi) {
		m.lock();
		cout << "To: " << _emailAdresa << endl;
		cout << "Subject: Osvareni bodovi" << endl << endl;
		cout << "Postovani," << endl << endl;
		cout << "Prilikom posljednje kupovine ste ostvarili " << bodovi << " bodova, tako da trenutno vas ukupan broj bodova iznosi " << GetBodoviUkupno() << endl << endl;
		cout << "Zahvaljujemo vam na kupovini." << endl;
		cout << "Puno pozdrava" << endl;
		m.unlock();
	}


	Kolekcija<Karakteristike, const char*>  GetKupovineByKomentar(const char* komentar) {

		Kolekcija<Karakteristike, const char*> novakolekcija; // prazna kolekcija
		string trazenaRijec = komentar; // ostecen kao string


		for (int i = 0; i < _kupovine.getTrenutno(); i++)
		{
			for (int j = 0; j < _kupovine.getElement2(i).GetKomentareKarakteristika().getTrenutno(); j++)
			{
				string komentar = _kupovine.getElement2(i).GetKomentareKarakteristika().getElement2(j);

				if (komentar.find(trazenaRijec) != -1) { // trazena rijec postoji u nekoj recenici

					novakolekcija.AddElement(*_kupovine.getElement2(i).GetKomentareKarakteristika().getElement1(j), _kupovine.getElement2(i).GetKomentareKarakteristika().getElement2(j));


				}

			}
		}
		return novakolekcija;

	}


	~Potrosac()
	{
		delete[] _emailAdresa; _emailAdresa = nullptr;
	}

	char* GetEmail() { return _emailAdresa; }
	Kolekcija<float, ZadovoljstvoPotrosaca>& GetKupovine() { return _kupovine; }
	vector<int> GetBodovi() { return _bodovi; }
	int GetBodoviUkupno() {
		int ukupno = 0;
		for (size_t i = 0; i < _bodovi.size(); i++) ukupno += _bodovi[i];
		return ukupno;
	}

	friend ostream& operator<< (ostream& COUT, const Potrosac& obj) {
		COUT << crt << obj._imePrezime << " " << obj._datumRodjenja << " " << obj._emailAdresa << " " << endl;
		COUT << "KUPOVINE -> " << crt;
		for (size_t i = 0; i < obj._kupovine.getTrenutno(); i++)
			COUT << "Iznos racuna: " << obj._kupovine.getElement1(i) << "KM, zadovoljstvo kupca: " << obj._kupovine.getElement2(i) << crt;
		COUT << "BODOVI -> ";
		for (size_t i = 0; i < obj._bodovi.size(); i++)
			COUT << obj._bodovi[i] << ", ";
		COUT << crt;
		return COUT;
	}
};

const char* GetOdgovorNaPrvoPitanje() {
	cout << "Pitanje -> Nabrojite i ukratko pojasnite osnovne razlike izmedju list i vector klase?\n";
	return "Odgovor -> OVDJE UNESITE VAS ODGOVOR";
}
const char* GetOdgovorNaDrugoPitanje() {
	cout << "Pitanje -> Pojasnite opcije vezane za preslikavanje (vrijednosti, referenci, dostupnost) parametara prilikom koristenja lambda funkcija?\n";
	return "Odgovor -> OVDJE UNESITE VAS ODGOVOR";
}

void main() {

	cout << PORUKA;
	cin.get();

	cout << GetOdgovorNaPrvoPitanje() << endl;
	cin.get();
	cout << GetOdgovorNaDrugoPitanje() << endl;
	cin.get();

	const int kolekcijaTestSize = 9;
	Kolekcija<int, int> kolekcija1(false);
	for (int i = 0; i < kolekcijaTestSize - 1; i++)
		kolekcija1.AddElement(i, i);//dodaje vrijednosti u kolekcija

	try {
		//ukoliko nije dozvoljeno dupliranje elemenata (provjeravaju se T1 ili T2), metoda AddElement treba baciti objekat tipa exception
		kolekcija1.AddElement(3, 3);
	}
	catch (exception& err) {
		cout << err.what() << crt;
	}
	kolekcija1.AddElement(9, 9);

	cout << kolekcija1 << crt;

	/*
	* metoda prihvata indekse lokacije, te vraća elemente koji se u kolekciji nalaze na proslijedjenim lokacijama (ukljucujuci i te lokacije)
	*/
	Kolekcija<int, int> kolekcija2 = kolekcija1(2, 5);
	/*clanovi objekta kolekcija2 bi trebali biti:
	2 2
	3 3
	4 4
	5 5
	*/
	cout << kolekcija2 << crt;
	Kolekcija<int, int> kolekcija3 = kolekcija1(2, 5, true);
	/*ukoliko se posalje treci parametar koji oznacava potrebu
	za obrnutim redoslijedom vracenih vrijednosti, clanovi objekta kolekcija3 bi trebali biti:
	5 5
	4 4
	3 3
	2 2
	*/
	cout << kolekcija3 << crt;

	kolekcija3 = kolekcija2;
	cout << kolekcija3 << crt;

	const int maxPotrosaca = 3;
	Osoba* potrosaci[maxPotrosaca];
	potrosaci[0] = new Potrosac("Denis Music", Datum(12, 1, 1980), "denis@fit.ba");
	potrosaci[1] = new Potrosac("Jasmin Azemovic", Datum(12, 2, 1980), "jasmin@fit.ba");
	potrosaci[2] = new Potrosac("Adel Handzic", Datum(12, 3, 1980), "adel@edu.fit.ba");

	ZadovoljstvoPotrosaca zadovoljstvo(7);
	zadovoljstvo.DodajKomentarKarakteristike(NARUDZBA, "Nismo mogli odabrati sve potrebne opcije");
	zadovoljstvo.DodajKomentarKarakteristike(KVALITET, "Kvalitet je ocekivan");

	try {
		//karakteristika kvalitet je vec komentarisana
		zadovoljstvo.DodajKomentarKarakteristike(KVALITET, "Kvalitet je ocekivan");
	}
	catch (exception& err) {
		cout << err.what() << crt;
	}

	zadovoljstvo.DodajKomentarKarakteristike(PAKOVANJE, "Pakovanje je bio osteceno");
	zadovoljstvo.DodajKomentarKarakteristike(ISPORUKA, "Mada su najavili da ce proizvod biti isporucen u roku od 2 dana, cekali smo 5 dana");


	Potrosac* denis = dynamic_cast<Potrosac*>(potrosaci[0]);
	/*za svakih 10KM kupcu se dodaje 1 bod, pa ce tako kupovina od 128KM kupcu donijeti 12 bodova*/
	denis->DodajKupovinu(128, zadovoljstvo);
	cout << "Ukupno bodova -> " << denis->GetBodoviUkupno();//12 bodova


	ZadovoljstvoPotrosaca zadovoljstvoKupca2(4);
	zadovoljstvoKupca2.DodajKomentarKarakteristike(KVALITET, "Jako lose, proizvod ostecen");
	denis->DodajKupovinu(81, zadovoljstvoKupca2);

	cout << "Ukupno bodova -> " << denis->GetBodoviUkupno();//20 bodova

	/*prilikom svake kupovine, ukoliko je kupac ostvario vise od 5 bodova, potrebno je, u zasebnom thread-u (nakon 3 sekunde), poslati email sa sljedecim sadrzajem:

	  To: denis@fit.ba;
	  Subject: Osvareni bodovi

	  Postovani,

	  Prilikom posljednje kupovine ste ostvarili 8 bodova, tako da trenutno vas ukupan broj bodova iznosi 20.

	  Zahvaljujemo vam na kupovini.
	  Puno pozdrava
  */


  //ispisuje sve podatke o kupcu i njegovim kupovinama.
	denis->Info();
	/* Primjer ispisa:
		-------------------------------------------
		Denis Music 12.1.1980 denis@fit.ba
		KUPOVINE ->
		-------------------------------------------
		Iznos racuna: 128KM, zadovoljstvo kupca: 7
				NARUDZBA - Nismo mogli odabrati sve potrebne opcije
				KVALITET - Kvalitet je ocekivan
				PAKOVANJE - Pakovanje je bio osteceno
				ISPORUKA - Mada su najavili da ce proizvod biti isporucen u roku od 2 dana, cekali smo 5 dana
		-------------------------------------------
		Iznos racuna: 81KM, zadovoljstvo kupca: 4
				KVALITET - Jako lose, proizvod ostecen
		-------------------------------------------
		BODOVI -> 12, 8,
		-------------------------------------------
   */

   //metoda GetKupovineByKomentar treba da pronadje i vrati sve karakteristike proizvoda i komentare kupaca koji sadrze vrijednost proslijedjenog parametra
	Kolekcija<Karakteristike, const char*> osteceniProizvodi = denis->GetKupovineByKomentar("ostecen");
	cout << crt << "Rezultat pretrage -> " << crt << osteceniProizvodi << crt;

	/*Ocekivani ispis:
		-------------------------------------------
		Rezultat pretrage ->
		-------------------------------------------
		PAKOVANJE Pakovanje je bio osteceno
		KVALITET Jako lose, proizvod ostecen
		-------------------------------------------
	*/

	for (size_t i = 0; i < maxPotrosaca; i++)
		delete potrosaci[i], potrosaci[i] = nullptr;

	cin.get();
	system("pause>0");
}
#include <iostream>
#include <vector>
#include <string>
#include <regex>
#include <mutex>
#include <thread>
#include <fstream>
#include <memory>
using namespace std;

const char* PORUKA = "\n-------------------------------------------------------------------------------\n"
"0. PROVJERITE DA LI PREUZETI ZADACI PRIPADAJU VASOJ GRUPI (G1/G2)\n"
"1. SVE KLASE TREBAJU POSJEDOVATI ADEKVATAN DESTRUKTOR\n"
"2. NAMJERNO IZOSTAVLJANJE KOMPLETNIH I/ILI POJEDINIH DIJELOVA DESTRUKTORA CE BITI OZNACENO KAO TM\n"
"3. SPASAVAJTE PROJEKAT KAKO BI SE SPRIJECILO GUBLJENJE URADJENOG ZADATKA\n"
"4. ATRIBUTI, NAZIVI FUNKCIJA, TE BROJ I TIP PARAMETARA MORAJU BITI IDENTICNI ONIMA KOJI SU KORISTENI U TESTNOM CODE-U, "
"OSIM U SLUCAJU DA POSTOJI ADEKVATAN RAZLOG ZA NJIHOVU MODIFIKACIJU. OSTALE "
"POMOCNE FUNKCIJE MOZETE IMENOVATI I DODAVATI PO ZELJI.\n"
"5. IZUZETAK BACITE SAMO U FUNKCIJAMA U KOJIMA JE TO NAZNACENO.\n"
"6. METODE I KLASE KOJE NE IMPLEMENTIRATE NEMOJTE BRISATI (BEZ OBZIRA STO NEMAJU IMPLEMENTACIJU)!\n"
"7. NA KRAJU ISPITA SVOJE RJESENJE KOPIRATE U .DOCX FAJL (IMENOVAN BROJEM INDEKSA)!\n"
"8. RJESENJA ZADATKA POSTAVITE NA FTP SERVER U ODGOVARAJUCI FOLDER!\n"
"9. NEMOJTE POSTAVLJATI VISUAL STUDIO PROJEKTE, VEC SAMO .DOCX FAJL SA VASIM RJESENJEM!\n"
"10.SVE NEDOZVOLJENE RADNJE TOKOM ISPITA CE BITI SANKCIONISANE!\n"
"11. ZA POTREBE TESTIRANJA, U MAINU, BUDITE SLOBODNI DODATI TESTNIH PODATAKA (POZIVA FUNKCIJA) KOLIKO GOD SMATRATE DA JE POTREBNO!\n"
"12. ZA IZRADU ISPITNOG RJESENJA KORISTITI VISUAL STUDIO 2022!\n"
"-------------------------------------------------------------------------------\n";

const char* crt = "\n-------------------------------------------\n";


//                       0        1         2             3
enum Karakteristike { NARUDZBA, KVALITET, PAKOVANJE, ISPORUKA };


ostream& operator<< (ostream& COUT, const Karakteristike& obj) {

	const char* TekstKarakteristika[]{ "NARUDZBA","KVALITET","PAKOVANJE","ISPORUKA" };

	COUT << TekstKarakteristika[obj];
	return COUT;
}


char* GetNizKaraktera(const char* sadrzaj, bool dealociraj = false) {
	if (sadrzaj == nullptr)return nullptr;
	int vel = strlen(sadrzaj) + 1;
	char* temp = new char[vel];
	strcpy_s(temp, vel, sadrzaj);
	if (dealociraj)
		delete[]sadrzaj;
	return temp;
}

template<class T1, class T2>
class Rjecnik {
	T1* _elementi1; // T1* _elementi1[max];  // T1 _elementi1;
	T2* _elementi2;
	int* _trenutno;
	bool _omoguciDupliranje;
public:
	Rjecnik(bool omoguciDupliranje = true) {
		_omoguciDupliranje = omoguciDupliranje;

		_trenutno = new int(0); // trenutno = 0; <--- da trenutno nije pokazivac

		_elementi1 = new T1[*_trenutno];
		_elementi2 = new T2[*_trenutno];

	}
	Rjecnik(const Rjecnik& obj) {
		_omoguciDupliranje = obj._omoguciDupliranje;
		_trenutno = new int(*obj._trenutno);

		_elementi1 = new T1[*_trenutno];
		_elementi2 = new T2[*_trenutno];

		for (int i = 0; i < *_trenutno; i++)
		{
			_elementi1[i] = obj._elementi1[i];
			_elementi2[i] = obj._elementi2[i];
		}

	}

	Rjecnik& operator = (const Rjecnik& obj) {
		if (this != &obj) {

			delete _trenutno;
			delete[]_elementi1;
			delete[]_elementi2;


			_omoguciDupliranje = obj._omoguciDupliranje;
			_trenutno = new int(*obj._trenutno);

			_elementi1 = new T1[*_trenutno];
			_elementi2 = new T2[*_trenutno];

			for (int i = 0; i < *_trenutno; i++)
			{
				_elementi1[i] = obj._elementi1[i];
				_elementi2[i] = obj._elementi2[i];
			}
		}
		return *this;
	}

	void AddElement(T1 el1, T2 el2) {
		if (_omoguciDupliranje == false) // kada omoguci dupliranje je false
		{
			for (int i = 0; i < *_trenutno; i++)
			{
				if (el1 == _elementi1[i] || el2 == _elementi2[i]) {
					throw exception("Dupliranje nije dozvoljeno"); // <-- kada imas try catch u kodu radi exception
				}
			}
		}



		T1* temp1 = _elementi1; // <--- prekopiramo sve elemente u neku privremenu vrijedost
		T2* temp2 = _elementi2;

		_elementi1 = new T1[*_trenutno + 1]; // prosirujemo da ima jedno dodatno mjesto
		_elementi2 = new T2[*_trenutno + 1];

		for (int i = 0; i < *_trenutno; i++)
		{
			_elementi1[i] = temp1[i];
			_elementi2[i] = temp2[i];
		}

		_elementi1[*_trenutno] = el1;
		_elementi2[*_trenutno] = el2;

		// _trenutno++; // <---- ako trenutno nije pokazivac

		(*_trenutno)++; // <--- ako je pokzivac trenutno nemoj zaboravit u zagrade ga stavit prije ++ 

	}

	//                                     2         5
	Rjecnik<int, int> operator () (int pocetak, int kraj) {

		Rjecnik<int, int> novakolekcija;  // prazna kolekcija koja u sebi nema nista


		for (int i = pocetak; i <= kraj; i++)
		{
			novakolekcija.AddElement(_elementi1[i], _elementi2[i]);
		}

		return novakolekcija;

	}


	~Rjecnik() {
		delete _trenutno; _trenutno = nullptr;
		delete[] _elementi1; _elementi1 = nullptr;
		delete[] _elementi2; _elementi2 = nullptr;
	}


	T1& getElement1(int lokacija)const { return _elementi1[lokacija]; }
	T2& getElement2(int lokacija)const { return _elementi2[lokacija]; }
	int getTrenutno() const { return *_trenutno; } // 1. CAKA FALI OVDJE CONST  , 2. FALI * ISPRED TRENUTNO


	friend ostream& operator<< (ostream& COUT, const Rjecnik& obj) {
		for (size_t i = 0; i < *obj._trenutno; i++)  // 3. FALI * NA OBJ.TRENUTNO
			COUT << obj.getElement1(i) << " " << obj.getElement2(i) << endl;
		return COUT;
	}
};
class Datum {
	int* _dan, * _mjesec, * _godina;
public:
	Datum(int dan = 1, int mjesec = 1, int godina = 2000) {
		// _dan = &dan;   // <---- CAKA 2 bude u nekih 10% ispita
		_dan = new int(dan);   // <---- 
		_mjesec = new int(mjesec);
		_godina = new int(godina);
	}

	// & znaci da koristimo original 
	// const znaci da je vrijednsot konstantna i da se ne moze mijenjati 
	Datum(const Datum& obj) { // <----  kada nema & napravi se kopija datum u memoriji

		_dan = new int(*obj._dan);
		_mjesec = new int(*obj._mjesec);
		_godina = new int(*obj._godina);

	}

	Datum& operator = (const Datum& obj) {
		if (this != &obj) {
			delete _dan;
			delete _mjesec;
			delete _godina;


			_dan = new int(*obj._dan);
			_mjesec = new int(*obj._mjesec);
			_godina = new int(*obj._godina);
		}
		return *this;
	}

	// 12 12 1998
	// 12 12 1998
	bool operator == (const Datum obj) { // radi se za svaku klasu osim klekcije i zadnje klase
		return *_dan == *obj._dan && *_mjesec == *obj._mjesec && *_godina == *obj._godina;
	}

	// datum1 == 12312321 > datum2 = 213123
	int SumaDana() {  // racuna koliko svaki datum u sebi ima dana
		return *_dan + *_mjesec * 30 + *_godina + 365;
	}



	~Datum() {
		delete _dan; _dan = nullptr;
		delete _mjesec; _mjesec = nullptr;
		delete _godina; _godina = nullptr;
	}
	friend ostream& operator<< (ostream& COUT, const Datum& obj) {
		COUT << *obj._dan << "." << *obj._mjesec << "." << *obj._godina;  // <--- CAKA 1 fale * 
		return COUT;
	}
};


// char *, int , Datum , enum 
// 1. PARAMETAR
// KOLEKCIJA<2.PARAMETAR, 3.PARAMETAR>

class ZadovoljstvoKupca {
	int _ocjena; //za svaku kupovinu kupac moze ostaviti jednu ocjenu
	//uz ocjenu, kupci mogu komentarisati svaku od karakteristika proizvoda.
	//onemoguciti dupliranje karakteristika tj. svaka karakteristika se moze komentarisati samo jednom...u suprotnom baciti objekat tipa exception
	Rjecnik<Karakteristike, const char*> _komentariKarakteristika;
public:
	ZadovoljstvoKupca(int ocjena = 0) {
		_ocjena = ocjena;

		// za rijecnik ne radimo nista jer on nije pokazivac  *

		// ako je rijecnik pokazivac 
		// _komentariKarakteristika = new Rjecnik<Karakteristike, const char*>();
	}

	ZadovoljstvoKupca(const ZadovoljstvoKupca& obj) {
		_ocjena = obj._ocjena;

		_komentariKarakteristika = obj._komentariKarakteristika;

		// da je komentarikar pokazivac
		// _komentariKarakteristika = new Rjecnik<Karakteristike, const char*>(*obj._komentariKarakteristika);
	}

	ZadovoljstvoKupca& operator = (const ZadovoljstvoKupca& obj) {
		if (this != &obj) {



			_ocjena = obj._ocjena;
			_komentariKarakteristika = obj._komentariKarakteristika;
		}
		return *this;
	}

	bool operator == (const ZadovoljstvoKupca& obj) {

		if (_ocjena != obj._ocjena)
			return false;

		for (int i = 0; i < _komentariKarakteristika.getTrenutno(); i++)
		{
			//                                         1 != 2 
			if (_komentariKarakteristika.getElement1(i) != obj._komentariKarakteristika.getElement1(i) || strcmp(_komentariKarakteristika.getElement2(i), obj._komentariKarakteristika.getElement2(i)) != 0) {

				return false;
			}
		}
		return true;
	}

	//                                                  KVALITET
	void DodajKomentarKarakteristike(Karakteristike karakteristika, const char* komentar) {
		for (int i = 0; i < _komentariKarakteristika.getTrenutno(); i++)
		{
			if (karakteristika == _komentariKarakteristika.getElement1(i)) {
				throw exception("Karakteristika je vec ocjenjena");
			}
		}

		_komentariKarakteristika.AddElement(karakteristika, komentar);
	}


	int GetOcjena() { return _ocjena; }
	Rjecnik<Karakteristike, const char*>& GetKomentareKarakteristika() { return _komentariKarakteristika; }

	//zadovoljstvo kupca : 7
	//			NARUDZBA - Nismo mogli odabrati sve potrebne opcije
	//			KVALITET - Kvalitet je ocekivan
	//			PAKOVANJE - Pakovanje je bio osteceno
	//			ISPORUKA - Mada su najavili da ce proizvod biti isporucen u roku od 2 dana, cekali smo 5 dana

	friend ostream& operator<< (ostream& COUT, const ZadovoljstvoKupca& obj) {
		COUT << obj._ocjena << endl;
		for (int i = 0; i < obj._komentariKarakteristika.getTrenutno(); i++)
		{
			//   alt + q
			COUT << "\t" << obj._komentariKarakteristika.getElement1(i) << " - " << obj._komentariKarakteristika.getElement2(i) << endl;
		}
		return COUT;
	}
};

class Osoba {
protected:
	char* _imePrezime;  // VEDAD 
	Datum _datumRodjenja;
public:
	Osoba(const char* imePrezime = "", Datum datumRodjenja = Datum()) : _datumRodjenja(datumRodjenja) {
		_imePrezime = GetNizKaraktera(imePrezime);
	}
	Osoba(const Osoba& obj) {
		_imePrezime = GetNizKaraktera(obj._imePrezime);
		_datumRodjenja = obj._datumRodjenja;
	}
	Osoba& operator = (const Osoba& obj) {
		if (this != &obj) {
			delete[]_imePrezime;


			_imePrezime = GetNizKaraktera(obj._imePrezime);
			_datumRodjenja = obj._datumRodjenja;
		}
		return *this;
	}




	virtual ~Osoba() { // u klasi koja se nasljejduje treba se staviti virtual prije destruktora
		delete[] _imePrezime; _imePrezime = nullptr;
	}
	char* GetImePrezime() { return _imePrezime; }
	Datum& GetDatumRodjenja() { return _datumRodjenja; }



	virtual void Info() = 0; // klasa osoba postaje apstraktna sto znaci da ona vise nije klasa nego samo neki pomagac da neko drugi pravi neku drugu klasu 



	friend ostream& operator<< (ostream& COUT, const Osoba& obj) {
		COUT << obj._imePrezime << " " << obj._datumRodjenja << endl;
		return COUT;
	}
};


// KADA otkomentarises zadnju klasu i ona u ispisu pokusava da ispise parametar koji joj ne pripada onda znamo da se mora nasljediti klasa iznad
mutex m;
class Kupac :public Osoba {  // 1. KORAK U NASLJEDJIVANJU stavit   :public Osoba
	char* _emailAdresa;
	//float se odnosi na iznos racuna za odredjenu kupovinu
	Rjecnik<float, ZadovoljstvoKupca>* _kupovine;
	vector<int> _bodovi; // bodovi sakupljeni tokom kupovine, svakih potrosenih 10KM donosi po 1 bod.
public:
	Kupac(const char* imePrezime = "", Datum datumRodjenja = Datum(), const char* emailAdresa = "")
		:Osoba(imePrezime, datumRodjenja) { // 2. KORAK SPOJITI SPOJENI KONSTRUKTOR KLASE OSOBA SA KLASOM KUPAC
		_emailAdresa = GetNizKaraktera(emailAdresa);
		_kupovine = new Rjecnik<float, ZadovoljstvoKupca>(false);
	}

	Kupac(const Kupac& obj) :Osoba(obj) { // 3. KORAK SPOJITI COPY KUPCA SA COPY OSOBE
		_emailAdresa = GetNizKaraktera(obj._emailAdresa);
		_kupovine = new Rjecnik<float, ZadovoljstvoKupca>(*obj._kupovine);
		_bodovi = obj._bodovi;
	}

	Kupac& operator = (const Kupac& obj) {
		if (this != &obj) {

			delete[]_emailAdresa;
			delete _kupovine;


			Osoba::operator=(obj);  // 4. KORAK SPOJITI OPERAOTR KUPCA SA OPERAOTORM OSOBE

			_emailAdresa = GetNizKaraktera(obj._emailAdresa);
			_kupovine = new Rjecnik<float, ZadovoljstvoKupca>(*obj._kupovine);
			_bodovi = obj._bodovi;
		}
		return *this;
	}

	void Info() { // 5. KORAK SPOJITI INFO KUPCA SA INFO OSOBE
		cout << *this;
	}


	~Kupac()
	{
		delete[] _emailAdresa; _emailAdresa = nullptr;
		delete _kupovine; _kupovine = nullptr;
	}


	char* GetEmail() { return _emailAdresa; }
	Rjecnik<float, ZadovoljstvoKupca>& GetKupovine() { return *_kupovine; }
	vector<int> GetBodovi() { return _bodovi; }



	///*prilikom svake kupovine, ukoliko je kupac ostvario vise od 5 bodova, potrebno je, u zasebnom thread-u (nakon 3 sekunde), poslati email sa sljedecim sadrzajem:


	void DodajKupovinu(float IznosRacuna, ZadovoljstvoKupca zadovoljstvo) {

		_kupovine->AddElement(IznosRacuna, zadovoljstvo);

		if (IznosRacuna > 9) {
			int bod = IznosRacuna / 10;   // 128 / 10  = 12  --- 81/ 10 = 8 


			// KADA IMAMO VECTOR IMAMO DVIJE MOGUCNSOTI
			// 1. KADA HOCEMO NESTO DA UBACIMO U VECTOR
			_bodovi.push_back(bod); // <---- UBACIVANJE U VECTOR

			// 2. KADA TI TREBA VELICINA VECOTRA (SIZE.() )
			//for (int i = 0; i < _bodovi.size(); i++)
			//{

			//}
			if (bod > 5) {

				//AKO NAM KAZE NAKON 3 SEKUNDE , 3000 MILISEKUNDI
			   //this_thread::sleep_for(chrono::seconds(3));
			   //// this_thread::sleep_for(chrono::milliseconds(3000));
			   //thread t1(&Kupac::PosaljiMail, this, bod); 
			   //t1.join();

			   // tacnije ali kompleksnije rješenje , kada se pauzira t1 thread umjesto main threada

			   thread t1([this, bod]() {
			   	this_thread::sleep_for(chrono::seconds(3));
			   	PosaljiMail(bod);
			   	});
			   t1.join();

			}

		}

	}

	//  To: denis@fit.ba;
	//  Subject: Osvareni bodovi

	//  Postovani,

	//  Prilikom posljednje kupovine ste ostvarili 8 bodova, tako da trenutno vas ukupan broj bodova iznosi 20.

	//  Zahvaljujemo vam na kupovini.
	//  Puno pozdrava

	void PosaljiMail(int bod) {
		m.lock();
		cout << "To: " << _emailAdresa << endl;
		cout << "Subject: Osvareni bodovi" << endl << endl;
		cout << "Postovani," << endl << endl;
		cout << "Prilikom posljednje kupovine ste ostvarili " << bod << " bodova, tako da trenutno vas ukupan broj bodova iznosi " << GetBodoviUkupno() << endl << endl;
		cout << "Zahvaljujemo vam na kupovini." << endl;
		cout << "Puno pozdrava" << endl;
		m.unlock();
	}


	//  /*metoda SacuvajBodove treba sve clanove vector-a _bodovi upisati u fajl(ignorisuci ranije dodate/postojece vrijednosti u fajlu) pod nazivom emailKorisnika.txt npr. denis@fit.ba.txt.
//  na osnovu trenutnog stanja objekta, sadrzaj fajla denis@fit.ba.txt bi trebao biti sljedeci:
//  12
//  8

//  nakon spasavanja u fajl, sadrzaj vector-a ostaje nepromijenjen.
//  */

	// ifstream ---> citamo nesto iz nekog fajla 
	// ofstream ---> kreiranje novog fajla 

	void SacuvajBodove() {

		string naziv = _emailAdresa; // denis@fit.ba
		naziv += ".txt";  // denis@fit.ba.txt

		ofstream fajl(naziv);


		for (int i = 0; i < _bodovi.size(); i++)
		{
			fajl << _bodovi[i];

			if (i != _bodovi.size() - 1) {
				fajl << endl;
			}

		}

		fajl.close();

	}


	////metoda UcitajBodove ucitava sadrzaj fajla pod nazivom emailKorisnika.txt i njegove vrijednosti pohranjuje/dodaje u vector _bodovi (zadrzavajuci postojece bodove).  

	void UcitajBodove() {

		string naziv = _emailAdresa; // denis@fit.ba
		naziv += ".txt";  // denis@fit.ba.txt

		ifstream fajl(naziv);

		// Red ---> string ----> int

		char Red[20];          // Red
		string PomocniTekst;    // string
		int broj;              // int


		while (!fajl.eof()) {

			fajl.getline(Red, 20); // 12 
			PomocniTekst = Red;     // "12"

			//     string to integer
			broj = stoi(PomocniTekst); // 12 

			_bodovi.push_back(broj);

		}

		fajl.close();

	}

	//                                                                 ostecen
	Rjecnik<Karakteristike, const char*> GetKupovineByKomentar(string trazenaRijec) {

		Rjecnik<Karakteristike, const char*> osteceniProizvodi; // prazana kolekcija



		for (int i = 0; i < _kupovine->getTrenutno(); i++)
		{

			for (int j = 0; j < _kupovine->getElement2(i).GetKomentareKarakteristika().getTrenutno(); j++)
			{
				//			NARUDZBA - Nismo mogli odabrati sve potrebne opcije
				//			KVALITET - Kvalitet je ocekivan
				//			PAKOVANJE - Pakovanje je bio osteceno
				//			ISPORUKA - Mada su najavili da ce proizvod biti isporucen u roku od 2 dana, cekali smo 5 dana

				// Nismo mogli odabrati sve potrebne opcije
				string komentar = _kupovine->getElement2(i).GetKomentareKarakteristika().getElement2(j);

				if (komentar.find(trazenaRijec) != -1) {


					osteceniProizvodi.AddElement(
						_kupovine->getElement2(i).GetKomentareKarakteristika().getElement1(j),
						_kupovine->getElement2(i).GetKomentareKarakteristika().getElement2(j));

				}



			}



		}

		return osteceniProizvodi;


	}






	int GetBodoviUkupno() {
		int ukupno = 0;
		for (size_t i = 0; i < _bodovi.size(); i++) ukupno += _bodovi[i];
		return ukupno;
	}

	friend ostream& operator<< (ostream& COUT, const Kupac& obj) {
		COUT << crt << obj._imePrezime << " " << obj._datumRodjenja << " " << obj._emailAdresa << " " << endl;
		COUT << "KUPOVINE -> " << crt;
		for (size_t i = 0; i < obj._kupovine->getTrenutno(); i++)
			COUT << "Iznos racuna: " << obj._kupovine->getElement1(i) << "KM, zadovoljstvo kupca: " << obj._kupovine->getElement2(i) << crt;
		COUT << "BODOVI -> ";
		for (size_t i = 0; i < obj._bodovi.size(); i++)
			COUT << obj._bodovi[i] << ", ";
		COUT << crt;
		return COUT;
	}
};

const char* GetOdgovorNaPrvoPitanje() {
	cout << "Pitanje -> Nabrojite i ukratko pojasnite osnovne razlike izmedju list i vector klase?\n";
	return "Odgovor -> OVDJE UNESITE VAS ODGOVOR";
}
const char* GetOdgovorNaDrugoPitanje() {
	cout << "Pitanje -> Pojasnite opcije vezane za preslikavanje (vrijednosti, referenci, dostupnost) parametara prilikom koristenja lambda funkcija?\n";
	return "Odgovor -> OVDJE UNESITE VAS ODGOVOR";
}

void main() {

	cout << PORUKA;
	cin.get();

	cout << GetOdgovorNaPrvoPitanje() << endl;
	cin.get();
	cout << GetOdgovorNaDrugoPitanje() << endl;
	cin.get();


	//Datum datum1(12, 12, 1998);

	//Datum datum2 = datum1; // <---- copy constructor 

	//Datum datum3;

	//datum3 = datum1;  // <--- operator dodjele 

	// ako neka funckija ima ime VOID 
	// ako je neka funckija u ifu BOOL
	// ako nema ime OPERATOR 

	const int rjecnikTestSize = 9;
	Rjecnik<int, int> rjecnik1(false);
	for (int i = 0; i < rjecnikTestSize - 1; i++)
		rjecnik1.AddElement(i, i);//dodaje vrijednosti u rjecnik

	try {
		//ukoliko nije dozvoljeno dupliranje elemenata (provjeravaju se T1 ili T2), metoda AddElement treba baciti objekat tipa exception
		rjecnik1.AddElement(3, 3);
	}
	catch (exception& err) {
		cout << err.what() << crt;
	}

	rjecnik1.AddElement(9, 9);

	cout << rjecnik1 << crt;

	/*
	* metoda prihvata indekse lokacije, te vraća elemente koji se u rjecniku nalaze na proslijedjenim lokacijama (ukljucujuci i te lokacije)
	*/
	Rjecnik<int, int> rjecnik2 = rjecnik1(2, 5);


	/*clanovi objekta rjecnik2 bi trebali biti:
	2 2
	3 3
	4 4
	5 5
	*/
	cout << rjecnik2 << crt;


	const int maxKupaca = 3;
	Osoba* kupci[maxKupaca];
	kupci[0] = new Kupac("Denis Music", Datum(12, 1, 1980), "denis@fit.ba");
	kupci[1] = new Kupac("Jasmin Azemovic", Datum(12, 2, 1980), "jasmin@fit.ba");
	kupci[2] = new Kupac("Adel Handzic", Datum(12, 3, 1980), "adel@edu.fit.ba");

	ZadovoljstvoKupca zadovoljstvoKupca(7);
	zadovoljstvoKupca.DodajKomentarKarakteristike(NARUDZBA, "Nismo mogli odabrati sve potrebne opcije");
	zadovoljstvoKupca.DodajKomentarKarakteristike(KVALITET, "Kvalitet je ocekivan");

	try {
		//karakteristika kvalitet je vec komentarisana
		zadovoljstvoKupca.DodajKomentarKarakteristike(KVALITET, "Kvalitet je ocekivan");
	}
	catch (exception& err) {
		cout << err.what() << crt;
	}

	zadovoljstvoKupca.DodajKomentarKarakteristike(PAKOVANJE, "Pakovanje je bio osteceno");
	zadovoljstvoKupca.DodajKomentarKarakteristike(ISPORUKA, "Mada su najavili da ce proizvod biti isporucen u roku od 2 dana, cekali smo 5 dana");

	//cout << zadovoljstvoKupca;


	Kupac* denis = dynamic_cast<Kupac*>(kupci[0]);
	/*za svakih 10KM kupcu se dodaje 1 bod, pa ce tako kupovina od 128KM kupcu donijeti 12 bodova*/
	denis->DodajKupovinu(128, zadovoljstvoKupca);
	cout << "Ukupno bodova -> " << denis->GetBodoviUkupno();//12 bodova


	ZadovoljstvoKupca zadovoljstvoKupca2(4);
	zadovoljstvoKupca2.DodajKomentarKarakteristike(KVALITET, "Jako lose, proizvod ostecen");
	denis->DodajKupovinu(81, zadovoljstvoKupca2);

	cout << "Ukupno bodova -> " << denis->GetBodoviUkupno();//20 bodova

	///*prilikom svake kupovine, ukoliko je kupac ostvario vise od 5 bodova, potrebno je, u zasebnom thread-u (nakon 3 sekunde), poslati email sa sljedecim sadrzajem:

	//  To: denis@fit.ba;
	//  Subject: Osvareni bodovi

	//  Postovani,

	//  Prilikom posljednje kupovine ste ostvarili 8 bodova, tako da trenutno vas ukupan broj bodova iznosi 20.

	//  Zahvaljujemo vam na kupovini.
	//  Puno pozdrava
 // */


 // //ispisuje sve podatke o kupcu i njegovim kupovinama.
	denis->Info();
	///* Primjer ispisa:
	//	-------------------------------------------
	//	Denis Music 12.1.1980 denis@fit.ba
	//	KUPOVINE ->
	//	-------------------------------------------
	//	Iznos racuna: 128KM, zadovoljstvo kupca: 7
	//			NARUDZBA - Nismo mogli odabrati sve potrebne opcije
	//			KVALITET - Kvalitet je ocekivan
	//			PAKOVANJE - Pakovanje je bio osteceno
	//			ISPORUKA - Mada su najavili da ce proizvod biti isporucen u roku od 2 dana, cekali smo 5 dana
	//	-------------------------------------------
	//	Iznos racuna: 81KM, zadovoljstvo kupca: 4
	//			KVALITET - Jako lose, proizvod ostecen
	//	-------------------------------------------
	//	BODOVI -> 12, 8,
	//	-------------------------------------------
 //  */
 //  /*metoda SacuvajBodove treba sve clanove vector-a _bodovi upisati u fajl(ignorisuci ranije dodate/postojece vrijednosti u fajlu) pod nazivom emailKorisnika.txt npr. denis@fit.ba.txt.
 //  na osnovu trenutnog stanja objekta, sadrzaj fajla denis@fit.ba.txt bi trebao biti sljedeci:
 //  12
 //  8

 //  nakon spasavanja u fajl, sadrzaj vector-a ostaje nepromijenjen.
 //  */
	denis->SacuvajBodove();
	////metoda UcitajBodove ucitava sadrzaj fajla pod nazivom emailKorisnika.txt i njegove vrijednosti pohranjuje/dodaje u vector _bodovi (zadrzavajuci postojece bodove).  
	denis->UcitajBodove();
	denis->Info();

	//metoda GetKupovineByKomentar treba da pronadje i vrati sve karakteristike proizvoda i komentare kupaca koji sadrze vrijednost proslijedjenog parametra
	Rjecnik<Karakteristike, const char*> osteceniProizvodi = denis->GetKupovineByKomentar("ostecen");
	cout << crt << "Rezultat pretrage -> " << crt << osteceniProizvodi << crt;

	///*Ocekivani ispis:
	//	-------------------------------------------
	//	Rezultat pretrage ->
	//	-------------------------------------------
	//	PAKOVANJE Pakovanje je bio osteceno
	//	KVALITET Jako lose, proizvod ostecen
	//	-------------------------------------------
	//*/

	for (size_t i = 0; i < maxKupaca; i++)
		delete kupci[i], kupci[i] = nullptr;

	cin.get();
	system("pause>0");
}